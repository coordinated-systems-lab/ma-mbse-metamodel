schema {
  query: Query
  mutation: Mutation
}
type Query {
  """
  List of Projects
  """
  cpsProjectsQuery: ProjectsResponse
  """
  System Model for: 'Mission Aware' Facility
  """
  cpsSystemModelQuery(projectId: ID!): CPSsystemModelResponse
}
type ProjectsResponse {
  status: ResponseStatus
  projects: [Project]
}
type CPSsystemModelResponse
{
  status: ResponseStatus
  cpsSystemModel: CPSsystemModel
}
type CPSsystemModel {
  """
  The project identity.
  """
  project: Project

  """
  An attack pattern is a path or means by which a hacker can gain access to a
  computer or network server in order to deliver a payload or malicious outcome.
  Attacks enable hackers to exploit system vulnerabilities, including the human
  element.
  """
  attackPattern: [AttackPattern]

  """
  3-way associative class between Attack, Component / Link, & Remediation
  """
  attackVector: [AttackVector]

  """
  A category groups related entities. Specifically used for formal documentation
  to group non-functional requirements by subject matter.
  """
  category: [Category]

  """
  A component is an abstract term that represents the physical or logical entity
  that performs a specific function or functions.
  """
  component: [Component]

  """
  The ConstraintDefinition entity captures the definition of the parametric
  constraint as an Expression, identifying the independent variable(s) and the
  dependent variable in the definition.
  """
  constraintDefinition: [ConstraintDefinition]

  """
  The set of process model variables and values.
  """
  context: [Context]

  """
  A controller may provide control actions to control some process and to enforce
  constraints on the behavior of the controlled process.
  """
  controlAction: [ControlAction]

  """
  A defined term identifies a word, phrase, or acronym used in a document. The
  formal documentation scripts treat the entity name as the acronym meaning or the
  term, Acronym as the acronym, and Description as the term definition.
  """
  definedTerm: [DefinedTerm]

  """
  A document identifies either the source/authorization for information entered
  into the system description database, a specification/document generated from
  the contents of the database, or an applicable or reference document for a
  specification/document generated from the contents of the database.
  """
  document: [Document]

  """
  A domain set defines the number of iterations or replications in a control
  structure.
  """
  domainSet: [DomainSet]

  """
  An exit identifies a possible path to follow when a processing unit completes.
  """
  exit: [Exit]

  """
  Process models may be updated in part by feedback used to observe the controlled
  process.
  """
  feedback: [Feedback]

  """
  A Function is a transformation that accepts one or more inputs (items) and
  transforms them into outputs (items).
  """
  function: [Function]

  """
  A hazard is a system state or set of conditions that, together with a particular
  set of worst-case environmental conditions, will lead to a loss
  """
  hazard: [Hazard]

  """
  A Hazardous Control Action (HCA) is a control action that, in a particular
  context and worst-case environment, will lead to a hazard.
  """
  hazardousAction: [HazardousAction]

  """
  A routine practice for using basic security capabilities to reduce cyber risks
  due to common or pervasive threats.
  """
  hygienePractice: [HygienePractice]

  """
  Items represent flows within and between functions. An item is an input to or an
  output from a function.
  """
  item: [Item]

  """
  A link is the physical implementation of an interface.
  """
  link: [Link]

  """
  A loss involves something of value to stakeholders. Losses may include a loss of
  human life or human injury, property damage, environmental pollution, loss of
  mission, loss of reputation, loss or leak of sensitive information, or any other
  loss that is unacceptable to the stakeholders.
  """
  loss: [Loss]

  """
  A loss scenario describes the causal factors that can lead to the unsafe control
  and to hazards.    Two types of loss scenarios must be considered:  a) Why would
  Unsafe Control Actions occur?  b) Why would control actions be improperly
  executed or not executed, leading to hazards?
  """
  lossScenario: [LossScenario]

  """
  The hygiene or resilience approach to protect against a Loss, Hazard, Loss
  Scenario, or Attack Vector.
  """
  remediation: [Remediation]

  """
  A Requirement is either an originating requirement extracted from source
  documentation for a system, a refinement of a higher-level requirement, a
  derived characteristic of the system or one of its subcomponents, or a design
  decision.
  """
  requirement: [Requirement]

  """
  A resilient mode of the system that remediates one or more loss scenarios.
  """
  resilientMode: [ResilientMode]

  """
  A Resource is something (e.g., power, MIPS, interceptors, etc.) that the system
  uses, captures, or generates while it is operating.
  """
  resource: [Resource]

  """
  A State entity identifies a state of a component.
  """
  state: [State]

  """
  A TestActivity is an action performed in fulfilling the testing objectives of a
  program entity. It also transforms one or more inputs (test items) into outputs
  (test items).
  """
  testActivity: [TestActivity]

  """
  A TestConfiguration identifies the system components, test support hardware and
  software, and test facilities required to perform the associated test
  activities.
  """
  testConfiguration: [TestConfiguration]

  """
  TestItem is an input to, an output from, or triggers a test activity.
  """
  testItem: [TestItem]

  """
  Transition is the process or period of changing from one state or condition to
  another.
  """
  transition: [Transition]

  """
  A use case entity identifies a piece of the functionality of a system in terms
  of how the users use the system to achieve their goals. Use cases are high-level
  descriptions of behavior under a specific set of conditions. These high-level
  descriptions can then be elaborated to define the system behavior.
  """
  useCase: [UseCase]

  """
  A VerificationEvent specifies the implementation of the verification technique,
  what is to be verified, the estimated duration of the event, and the time window
  in which the event must occur.
  """
  verificationEvent: [VerificationEvent]

  """
  A VerificationRequirement describes what is to be proved (i.e., requirements),
  at what level the verification will occur, which method of verification should
  be used, and the current verification status.
  """
  verificationRequirement: [VerificationRequirement]

  """
  recursive call structure (select, parallel, loop, etc.) for each function
  """
  callStructure: [CallStructure]
}

type Mutation {
  """
  Mutate Project
  """
  cpsProjectMutation(project: Project_Input): ProjectResponse
  """
  Mutate CPS System Model
  """
  cpsSystemModelMutation(projectId: ID!, cpsSystemModel: CPSsystemModel_Input): CPSsystemModelResponse
}

type ProjectResponse {
  status: ResponseStatus
  project: Project
}
input CPSsystemModel_Input {
  attackPattern: [AttackPattern_Input]
  attackVector: [AttackVector_Input]
  category: [Category_Input]
  component: [Component_Input]
  constraintDefinition: [ConstraintDefinition_Input]
  context: [Context_Input]
  controlAction: [ControlAction_Input]
  definedTerm: [DefinedTerm_Input]
  document: [Document_Input]
  domainSet: [DomainSet_Input]
  exit: [Exit_Input]
  feedback: [Feedback_Input]
  function: [Function_Input]
  hazard: [Hazard_Input]
  hazardousAction: [HazardousAction_Input]
  hygienePractice: [HygienePractice_Input]
  item: [Item_Input]
  link: [Link_Input]
  loss: [Loss_Input]
  lossScenario: [LossScenario_Input]
  remediation: [Remediation_Input]
  requirement: [Requirement_Input]
  resilientMode: [ResilientMode_Input]
  resource: [Resource_Input]
  state: [State_Input]
  testActivity: [TestActivity_Input]
  testConfiguration: [TestConfiguration_Input]
  testItem: [TestItem_Input]
  transition: [Transition_Input]
  useCase: [UseCase_Input]
  verificationEvent: [VerificationEvent_Input]
  verificationRequirement: [VerificationRequirement_Input]
}

#########################################
# Common Definitions
#########################################
type ResponseStatus {
  code: ResponseCode
  message: String
}
enum ResponseCode
{
  Success
  FailureNotFound
  FailureNotUnique
 FailureGeneral
}
type Project {
  id: ID!
  name: String!
  description: String
  version: String
}
# for mutations
input Project_Input {
  operation: MutationOperation!
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  description: String
  version: String
}
type Parameter {
  name: String!
  description: String
  objective: String
  threshold: String
  design: String
  observed: String
  units: String
}
input Parameter_Input {
  operation: MutationOperation!
  name: String!
  description: String
  objective: String
  threshold: String
  design: String
  observed: String
  units: String
}
"""
Mutations for List items of an Entity (Parameters, Relations) include an 'instance' operation.
NOTE: when 'creating' an Entity, all associated List item instances must be set to 'Create'
      when 'updating' an Entity, only include associated List items to be 'Created', 'Updated', or 'Deleted'
      when 'deleting' an Entity, all associated List items are automatically deleted
"""
enum MutationOperation
{
  Create
  Update
  Delete
}
#########################################
# AttackPattern definition
#########################################
type AttackPattern {
  identity: AttackPatternID!
  attributes: AttackPatternATTR
  parameters: [Parameter]
  relations: AttackPatternREL
}
# for mutations
input AttackPattern_Input {
  operation: MutationOperation!
  identity: AttackPatternID_Input!
  attributes: AttackPatternATTR_Input
  parameters: [Parameter_Input]
  relations: AttackPatternREL_Input
}
type AttackPatternID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input AttackPatternID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type AttackPatternATTR {
  """
  Typical severity of this type of attack.
  """
  severity: AttackPatternSeverity

  """
  The domain of attack.  The attack domain aligns to the Component Type / Link: 
  Software -> SW Subsystem  Hardware -> HW Subsystem  Communication -> Link 
  Supply Chain -> HW & SW Subsystem  Social Engineering -> Human  Physical
  Security -> Environment
  """
  domainOfAttack: AttackPatternDomainOfAttack

  """
  The likelihood of the attack.
  """
  likelihood: AttackPatternLikelihood

  """
  A justification for not including the attack vector within the system scope.
  """
  outOfScopeJustification: String

  """
  Is the attack vector to be considered for the system?
  """
  outOfScope: Boolean

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum AttackPatternSeverity {
  nil
  Very_High
  High
  Medium
  Low
  Very_Low
}
enum AttackPatternDomainOfAttack {
  nil
  Software
  Hardware
  Communication
  Supply_Chain
  Social_Engineering
  Physical_Security
}
enum AttackPatternLikelihood {
  nil
  High
  Medium
  Low
}
# for mutations
input AttackPatternATTR_Input {
  severity: AttackPatternSeverity
  domainOfAttack: AttackPatternDomainOfAttack
  likelihood: AttackPatternLikelihood
  outOfScopeJustification: String
  outOfScope: Boolean
  description: String
}
type AttackPatternREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [AttackPattern_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [AttackPattern_DocumentedByTarget]

  """
  An Attack initiates Attack Vectors.
  """
  maInitiates: [AttackPattern_MaInitiatesTarget]

  """
  An attack pattern is motivation for hygiene practice.
  """
  maMotivationFor: [AttackPattern_MaMotivationForTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [AttackPattern_UsesTarget]

}
# for mutations
input AttackPatternREL_Input {
  categorizedBy: [AttackPattern_CategorizedByTarget_Input]
  documentedBy: [AttackPattern_DocumentedByTarget_Input]
  maInitiates: [AttackPattern_MaInitiatesTarget_Input]
  maMotivationFor: [AttackPattern_MaMotivationForTarget_Input]
  uses: [AttackPattern_UsesTarget_Input]
}
type AttackPattern_CategorizedByTarget {
  categoryTarget: CategoryID
}
type AttackPattern_DocumentedByTarget {
  documentTarget: DocumentID
}
type AttackPattern_MaInitiatesTarget {
  attackVectorTarget: AttackVectorID
}
type AttackPattern_MaMotivationForTarget {
  hygienePracticeTarget: HygienePracticeID
}
type AttackPattern_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input AttackPattern_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input AttackPattern_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input AttackPattern_MaInitiatesTarget_Input {
  operation: MutationOperation!
  attackVectorTarget: AttackVectorID_Input
}
input AttackPattern_MaMotivationForTarget_Input {
  operation: MutationOperation!
  hygienePracticeTarget: HygienePracticeID_Input
}
input AttackPattern_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# AttackVector definition
#########################################
type AttackVector {
  identity: AttackVectorID!
  attributes: AttackVectorATTR
  parameters: [Parameter]
  relations: AttackVectorREL
}
# for mutations
input AttackVector_Input {
  operation: MutationOperation!
  identity: AttackVectorID_Input!
  attributes: AttackVectorATTR_Input
  parameters: [Parameter_Input]
  relations: AttackVectorREL_Input
}
type AttackVectorID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input AttackVectorID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type AttackVectorATTR {
  """
  The likelihood of this attack on the associated component / link given the
  remediation.
  """
  remediatedLikelihood: AttackVectorRemediatedLikelihood

  """
  The severity of this attack on the associated Component / link given the
  remediation.
  """
  remediatedSeverity: AttackVectorRemediatedSeverity

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum AttackVectorRemediatedLikelihood {
  nil
  High
  Medium
  Low
}
enum AttackVectorRemediatedSeverity {
  nil
  Very_High
  High
  Medium
  Low
  Very_Low
}
# for mutations
input AttackVectorATTR_Input {
  remediatedLikelihood: AttackVectorRemediatedLikelihood
  remediatedSeverity: AttackVectorRemediatedSeverity
  description: String
}
type AttackVectorREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [AttackVector_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [AttackVector_DocumentedByTarget]

  """
  An Attack Vector is initiated by an Attack.
  """
  maInitiatedBy: [AttackVector_MaInitiatedByTarget]

  """
  A Loss Scenario is protected by a Sentinel.    A Loss, Hazard, Loss Scenario, or
  Attack Vector is protected by a Remediation.
  """
  maIsProtectedBy: [AttackVector_MaIsProtectedByTarget]

  """
  Identifies Entities that can be violated by an Attack.
  """
  maViolates: [AttackVector_MaViolatesTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [AttackVector_UsesTarget]

}
# for mutations
input AttackVectorREL_Input {
  categorizedBy: [AttackVector_CategorizedByTarget_Input]
  documentedBy: [AttackVector_DocumentedByTarget_Input]
  maInitiatedBy: [AttackVector_MaInitiatedByTarget_Input]
  maIsProtectedBy: [AttackVector_MaIsProtectedByTarget_Input]
  maViolates: [AttackVector_MaViolatesTarget_Input]
  uses: [AttackVector_UsesTarget_Input]
}
type AttackVector_CategorizedByTarget {
  categoryTarget: CategoryID
}
type AttackVector_DocumentedByTarget {
  documentTarget: DocumentID
}
type AttackVector_MaInitiatedByTarget {
  attackPatternTarget: AttackPatternID
}
type AttackVector_MaIsProtectedByTarget {
  remediationTarget: RemediationID
}
type AttackVector_MaViolatesTarget {
  componentTarget: ComponentID
  linkTarget: LinkID
}
type AttackVector_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input AttackVector_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input AttackVector_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input AttackVector_MaInitiatedByTarget_Input {
  operation: MutationOperation!
  attackPatternTarget: AttackPatternID_Input
}
input AttackVector_MaIsProtectedByTarget_Input {
  operation: MutationOperation!
  remediationTarget: RemediationID_Input
}
input AttackVector_MaViolatesTarget_Input {
  operation: MutationOperation!
  componentTarget: ComponentID_Input
  linkTarget: LinkID_Input
}
input AttackVector_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# Category definition
#########################################
type Category {
  identity: CategoryID!
  attributes: CategoryATTR
  parameters: [Parameter]
  relations: CategoryREL
}
# for mutations
input Category_Input {
  operation: MutationOperation!
  identity: CategoryID_Input!
  attributes: CategoryATTR_Input
  parameters: [Parameter_Input]
  relations: CategoryREL_Input
}
type CategoryID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input CategoryID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type CategoryATTR {
  """
  Description is the written statement of this entity.
  """
  description: String

}
# for mutations
input CategoryATTR_Input {
  description: String
}
type CategoryREL {
  """
  Categorizes identifies the entities that comprise the group defined by this
  entity.
  """
  categorizes: [Category_CategorizesTarget]

  """
  Included in identifies the parent of this entity.
  """
  includedIn: [Category_IncludedInTarget]

  """
  Includes identifies the children of this entity.
  """
  includes: [Category_IncludesTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [Category_UsesTarget]

}
# for mutations
input CategoryREL_Input {
  categorizes: [Category_CategorizesTarget_Input]
  includedIn: [Category_IncludedInTarget_Input]
  includes: [Category_IncludesTarget_Input]
  uses: [Category_UsesTarget_Input]
}
type Category_CategorizesTarget {
  definedTermTarget: DefinedTermID
  documentTarget: DocumentID
}
type Category_IncludedInTarget {
  categoryTarget: CategoryID
}
type Category_IncludesTarget {
  categoryTarget: CategoryID
}
type Category_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input Category_CategorizesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
  documentTarget: DocumentID_Input
}
input Category_IncludedInTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input Category_IncludesTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input Category_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# Component definition
#########################################
type Component {
  identity: ComponentID!
  attributes: ComponentATTR
  parameters: [Parameter]
  relations: ComponentREL
}
# for mutations
input Component_Input {
  operation: MutationOperation!
  identity: ComponentID_Input!
  attributes: ComponentATTR_Input
  parameters: [Parameter_Input]
  relations: ComponentREL_Input
}
type ComponentID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input ComponentID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type ComponentATTR {
  """
  Type identifies the component's role in the component hierarchy.
  """
  type: ComponentType

  """
  Contract Line Item Number is a reference to the contract's identification for
  the specific items and services requiring separate pricing.
  """
  clin: String

  """
  Is the Component out of scope for the system Attack Analysis?
  """
  outOfScopeAttackAnalysis: Boolean

  """
  A list of attributes describing important characteristics of the component type.
   For example, OS type, Firmware Version, Model Number, etc.  A project specific
  naming convention is suggested (for example: <attribute-name>:<attribute-value>,
  [os-type:linux])
  """
  inventory: [String]

  """
  A justification for excluding the Component from the Attack Analysis.
  """
  outofScopeJustification: String

  """
  Mission is the text description of the business purpose of a system.
  """
  mission: String

  """
  Operations describe synchronous interactions where the requestor waits for the
  request to be handled. This attribute identifies a subset of the allocated
  behavior that is critical to highlight on SysML representations.
  """
  operations: [String]

  """
  Doc. PUID is the project unique identifier that is often used in system
  development specifications and documents to identify the same entity in multiple
  documents. This is not to be confused with the database entity unique
  identifier.
  """
  puid: String

  """
  Purpose is a brief statement of the reason for the existence of the entity.
  """
  purpose: String

  """
  Receptions describe asynchronous interactions where the requestor can continue
  without waiting for a reply. This attribute identifies a subset of the allocated
  behavior that is critical to highlight on SysML representations.
  """
  receptions: [String]

  """
  Abbreviation identifies a unique shortened name for the entity.
  """
  abbreviation: String

  """
  Title is the label to be used in formal documentation instead of the entity
  name.
  """
  title: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum ComponentType {
  nil
  Assembly
  Context
  CSC
  CSCI
  CSU
  Element
  Environment
  External_System
  Facility
  Family_of_Systems
  Human
  HW_Element
  HWCI
  Network
  Part
  Segment
  Sentinel
  Service
  Software_Item
  Subassembly
  Subsystem
  SW_Element
  SWCI
  System
  System_Architecture
  System_of_Systems
  Test_Equipment
  Test_Software
  Threat_Simulator
}
# for mutations
input ComponentATTR_Input {
  type: ComponentType
  clin: String
  outOfScopeAttackAnalysis: Boolean
  inventory: [String]
  outofScopeJustification: String
  mission: String
  operations: [String]
  puid: String
  purpose: String
  receptions: [String]
  abbreviation: String
  title: String
  description: String
}
type ComponentREL {
  """
  Built from identifies the entities (children) that make up this entity (the
  parent).
  """
  builtFrom: [Component_BuiltFromTarget]

  """
  Built in identifies the parent entity for which this entity is a part.
  """
  builtIn: [Component_BuiltInTarget]

  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [Component_CategorizedByTarget]

  """
  Connected to identifies the connection that serves to link this unit to another
  entity.
  """
  connectedTo: [Component_ConnectedToTarget]

  """
  Mappings identifies the parameters associated with the constrained by
  relationship. The mappings relationship attribute shows how the parameter maps
  to the variable used.
  """
  constrainedBy: [Component_ConstrainedByTarget]

  """
  Described by identifies the use cases that reflect how the users will use this
  entity to achieve their physical objectives.
  """
  describedBy: [Component_DescribedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [Component_DocumentedByTarget]

  """
  Exhibits identifies characteristics of the entity.
  """
  exhibits: [Component_ExhibitsTarget]

  """
  Forms identifies the test configurations in which this entity is used.
  """
  forms: [Component_FormsTarget]

  """
  Generalization of associates a specific object classification with a more
  general object classification. For example, "Vehicle" is a generalization of
  "Car," "Train," and "Plane."
  """
  generalizationOf: [Component_GeneralizationOfTarget]

  """
  Kind of indicates classification. This relationship is often referred to as the
  "is a" relationship (i.e., a car "is a" vehicle).
  """
  kindOf: [Component_KindOfTarget]

  """
  The Function / Link / Item enables detection of Loss Scenario.
  """
  maEnablesDetectionOf: [Component_MaEnablesDetectionOfTarget]

  """
  Identifies Attack Patterns that may violate an Entity.
  """
  maIsViolatedBy: [Component_MaIsViolatedByTarget]

  """
  The component operation is altered in some way by the resilient mode.
  """
  maOperationAlteredBy: [Component_MaOperationAlteredByTarget]

  """
  A Sentinel protects against one or more Loss Scenarios.    A Remediation
  protects against a Loss, Hazard, Loss Scenario, or Attack Vector.
  """
  maProtectsAgainst: [Component_MaProtectsAgainstTarget]

  """
  An entity’s parameter is being referenced by a ConstraintDefinition.
  """
  parameterUsedIn: [Component_ParameterUsedInTarget]

  """
  Participates in identifies the use cases that this actor supports.
  """
  participatesIn: [Component_ParticipatesInTarget]

  """
  Performs identifies the actions that this entity accomplishes.
  """
  performs: [Component_PerformsTarget]

  """
  Reported by identifies the documentation entity of which the entity is the
  primary subject.
  """
  reportedBy: [Component_ReportedByTarget]

  """
  Specified by identifies constraint and/or performance requirements that this
  entity must satisfy.
  """
  specifiedBy: [Component_SpecifiedByTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [Component_UsesTarget]

  """
  Verified by points to the method of requirement proof which specifies the
  verification technique, level, and status.
  """
  verifiedBy: [Component_VerifiedByTarget]

}
# for mutations
input ComponentREL_Input {
  builtFrom: [Component_BuiltFromTarget_Input]
  builtIn: [Component_BuiltInTarget_Input]
  categorizedBy: [Component_CategorizedByTarget_Input]
  connectedTo: [Component_ConnectedToTarget_Input]
  constrainedBy: [Component_ConstrainedByTarget_Input]
  describedBy: [Component_DescribedByTarget_Input]
  documentedBy: [Component_DocumentedByTarget_Input]
  exhibits: [Component_ExhibitsTarget_Input]
  forms: [Component_FormsTarget_Input]
  generalizationOf: [Component_GeneralizationOfTarget_Input]
  kindOf: [Component_KindOfTarget_Input]
  maEnablesDetectionOf: [Component_MaEnablesDetectionOfTarget_Input]
  maIsViolatedBy: [Component_MaIsViolatedByTarget_Input]
  maOperationAlteredBy: [Component_MaOperationAlteredByTarget_Input]
  maProtectsAgainst: [Component_MaProtectsAgainstTarget_Input]
  parameterUsedIn: [Component_ParameterUsedInTarget_Input]
  participatesIn: [Component_ParticipatesInTarget_Input]
  performs: [Component_PerformsTarget_Input]
  reportedBy: [Component_ReportedByTarget_Input]
  specifiedBy: [Component_SpecifiedByTarget_Input]
  uses: [Component_UsesTarget_Input]
  verifiedBy: [Component_VerifiedByTarget_Input]
}
type Component_BuiltFromTarget {
  componentTarget: ComponentID
  """
  Whole Multiplicity indicates if the component is distinct and separable
  (wholeMultiplicity = 0; also termed composition) or whether the component is
  distinct and not separable (wholeMultiplicity = 1; also termed aggregation).
  """
  wholeMultiplicity: Component_BuiltFromWholeMultiplicity

  """
  PartRole is the name of the role that the part plays in the whole.
  """
  partRole: String

  """
  PartMultiplicity is the potential number of instances of the part built in the
  whole. This can be specified as zero, a whole number, or a range from a lower
  bound to an upper bound.
  """
  partMultiplicity: String

}
enum Component_BuiltFromWholeMultiplicity {
  E_0
  E_1
}
type Component_BuiltInTarget {
  componentTarget: ComponentID
  """
  Whole Multiplicity indicates if the component is distinct and separable
  (wholeMultiplicity = 0; also termed composition) or whether the component is
  distinct and not separable (wholeMultiplicity = 1; also termed aggregation).
  """
  wholeMultiplicity: Component_BuiltInWholeMultiplicity

  """
  PartRole is the name of the role that the part plays in the whole.
  """
  partRole: String

  """
  PartMultiplicity is the potential number of instances of the part built in the
  whole. This can be specified as zero, a whole number, or a range from a lower
  bound to an upper bound.
  """
  partMultiplicity: String

}
enum Component_BuiltInWholeMultiplicity {
  E_0
  E_1
}
type Component_CategorizedByTarget {
  categoryTarget: CategoryID
}
type Component_ConnectedToTarget {
  linkTarget: LinkID
  """
  Port ID provides a unique identification for the port that is used between the
  Link and the Component.
  """
  portID: String

}
type Component_ConstrainedByTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings show how the parameter maps to the variable used.
  """
  mappings: [String]

}
type Component_DescribedByTarget {
  useCaseTarget: UseCaseID
}
type Component_DocumentedByTarget {
  documentTarget: DocumentID
}
type Component_ExhibitsTarget {
  stateTarget: StateID
  """
  Behavior Type classifies the mapping between the source and destination
  entities.
  """
  behaviorType: Component_ExhibitsBehaviorType

}
enum Component_ExhibitsBehaviorType {
  Atomic
  Integrated_Root
}
type Component_FormsTarget {
  testConfigurationTarget: TestConfigurationID
}
type Component_GeneralizationOfTarget {
  componentTarget: ComponentID
  """
  Type classifies the nature of the generalization / specialization relationship.
  Inheritance indicates that the specialization shares the properties of the
  generalization. Instance indicates that the specialization also shares the
  relationships of the generalization.
  """
  type: Component_GeneralizationOfType

}
enum Component_GeneralizationOfType {
  Inheritance
  Instance
}
type Component_KindOfTarget {
  componentTarget: ComponentID
  """
  Type classifies the nature of the generalization / specialization relationship.
  Inheritance indicates that the specialization shares the properties of the
  generalization. Instance indicates that the specialization also shares the
  relationships of the generalization.
  """
  type: Component_KindOfType

}
enum Component_KindOfType {
  Inheritance
  Instance
}
type Component_MaEnablesDetectionOfTarget {
  lossScenarioTarget: LossScenarioID
  """
  constraint (=,<,>) for Item, Function, Link, Resource monitored by Sentinel
  """
  constraint: [String]

}
type Component_MaIsViolatedByTarget {
  attackVectorTarget: AttackVectorID
}
type Component_MaOperationAlteredByTarget {
  resilientModeTarget: ResilientModeID
}
type Component_MaProtectsAgainstTarget {
  lossScenarioTarget: LossScenarioID
}
type Component_ParameterUsedInTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings identifies the parameters associated with the uses parameter from
  relationship. The mappings relationship attribute shows how the parameter maps
  to the variable used.
  """
  mappings: [String]

}
type Component_ParticipatesInTarget {
  useCaseTarget: UseCaseID
}
type Component_PerformsTarget {
  functionTarget: FunctionID
  """
  Behavior Type classifies the mapping of the processing unit to the
  implementation unit.
  """
  behaviorType: Component_PerformsBehaviorType

}
enum Component_PerformsBehaviorType {
  Atomic
  Integrated_Root
  Thread
}
type Component_ReportedByTarget {
  documentTarget: DocumentID
}
type Component_SpecifiedByTarget {
  requirementTarget: RequirementID
  """
  The Governs relationship attribute identifies the Parameter attribute that is
  associated in both the Requirement entity and Component entity joined by the
  specified by / specifies relationship.
  """
  governs: String

}
type Component_UsesTarget {
  definedTermTarget: DefinedTermID
}
type Component_VerifiedByTarget {
  verificationRequirementTarget: VerificationRequirementID
}
# for mutations
input Component_BuiltFromTarget_Input {
  operation: MutationOperation!
  componentTarget: ComponentID_Input
  wholeMultiplicity: Component_BuiltFromWholeMultiplicity
  partRole: String
  partMultiplicity: String
}
input Component_BuiltInTarget_Input {
  operation: MutationOperation!
  componentTarget: ComponentID_Input
  wholeMultiplicity: Component_BuiltInWholeMultiplicity
  partRole: String
  partMultiplicity: String
}
input Component_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input Component_ConnectedToTarget_Input {
  operation: MutationOperation!
  linkTarget: LinkID_Input
  portID: String
}
input Component_ConstrainedByTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input Component_DescribedByTarget_Input {
  operation: MutationOperation!
  useCaseTarget: UseCaseID_Input
}
input Component_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Component_ExhibitsTarget_Input {
  operation: MutationOperation!
  stateTarget: StateID_Input
  behaviorType: Component_ExhibitsBehaviorType
}
input Component_FormsTarget_Input {
  operation: MutationOperation!
  testConfigurationTarget: TestConfigurationID_Input
}
input Component_GeneralizationOfTarget_Input {
  operation: MutationOperation!
  componentTarget: ComponentID_Input
  type: Component_GeneralizationOfType
}
input Component_KindOfTarget_Input {
  operation: MutationOperation!
  componentTarget: ComponentID_Input
  type: Component_KindOfType
}
input Component_MaEnablesDetectionOfTarget_Input {
  operation: MutationOperation!
  lossScenarioTarget: LossScenarioID_Input
  constraint: [String]
}
input Component_MaIsViolatedByTarget_Input {
  operation: MutationOperation!
  attackVectorTarget: AttackVectorID_Input
}
input Component_MaOperationAlteredByTarget_Input {
  operation: MutationOperation!
  resilientModeTarget: ResilientModeID_Input
}
input Component_MaProtectsAgainstTarget_Input {
  operation: MutationOperation!
  lossScenarioTarget: LossScenarioID_Input
}
input Component_ParameterUsedInTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input Component_ParticipatesInTarget_Input {
  operation: MutationOperation!
  useCaseTarget: UseCaseID_Input
}
input Component_PerformsTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
  behaviorType: Component_PerformsBehaviorType
}
input Component_ReportedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Component_SpecifiedByTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
  governs: String
}
input Component_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
input Component_VerifiedByTarget_Input {
  operation: MutationOperation!
  verificationRequirementTarget: VerificationRequirementID_Input
}
#########################################
# ConstraintDefinition definition
#########################################
type ConstraintDefinition {
  identity: ConstraintDefinitionID!
  attributes: ConstraintDefinitionATTR
  parameters: [Parameter]
  relations: ConstraintDefinitionREL
}
# for mutations
input ConstraintDefinition_Input {
  operation: MutationOperation!
  identity: ConstraintDefinitionID_Input!
  attributes: ConstraintDefinitionATTR_Input
  parameters: [Parameter_Input]
  relations: ConstraintDefinitionREL_Input
}
type ConstraintDefinitionID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input ConstraintDefinitionID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type ConstraintDefinitionATTR {
  """
  The Expression is defined in terms of independent variables which are evaluated
  to determine the dependent variable that represents the parametric constraint.
  """
  expression: [String]

  """
  The Dependent Variable is the parameter that results from evaluating the
  parametric constraint definition Expression. The Dependent Variable depends on
  one or more independent variables in an algebraic expression.
  """
  dependentVariables: [String]

  """
  The abbreviation is a shortened phrase or reduced form of the overall name which
  can be used to identify the entity. Abbreviation is used in the icon for a
  Constraint Block.
  """
  abbreviation: String

  """
  The Independent Variable(s) is (are) the variables that may be freely chosen
  without consideration of the Dependent Variable. Independent Variables are
  evaluated in the parametric constraint definition Expression.
  """
  independentVariables: [String]

  """
  Description is the written statement of this entity.
  """
  description: String

}
# for mutations
input ConstraintDefinitionATTR_Input {
  expression: [String]
  dependentVariables: [String]
  abbreviation: String
  independentVariables: [String]
  description: String
}
type ConstraintDefinitionREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [ConstraintDefinition_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [ConstraintDefinition_DocumentedByTarget]

  """
  Included in constraint definition defines the child in the parent-child
  relationship between ConstraintDefinitions.
  """
  includedInConstraintDefinition: [ConstraintDefinition_IncludedInConstraintDefinitionTarget]

  """
  Includes constraint definition defines the parent in the parent-child
  relationship between ConstraintDefinitions.
  """
  includesConstraintDefinition: [ConstraintDefinition_IncludesConstraintDefinitionTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [ConstraintDefinition_UsesTarget]

}
# for mutations
input ConstraintDefinitionREL_Input {
  categorizedBy: [ConstraintDefinition_CategorizedByTarget_Input]
  documentedBy: [ConstraintDefinition_DocumentedByTarget_Input]
  includedInConstraintDefinition: [ConstraintDefinition_IncludedInConstraintDefinitionTarget_Input]
  includesConstraintDefinition: [ConstraintDefinition_IncludesConstraintDefinitionTarget_Input]
  uses: [ConstraintDefinition_UsesTarget_Input]
}
type ConstraintDefinition_CategorizedByTarget {
  categoryTarget: CategoryID
}
type ConstraintDefinition_DocumentedByTarget {
  documentTarget: DocumentID
}
type ConstraintDefinition_IncludedInConstraintDefinitionTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings identifies the parameters associated with the included constraint
  definition relationship. The mappings relationship attribute shows how the
  parameter maps to the variable used.
  """
  mappings: [String]

}
type ConstraintDefinition_IncludesConstraintDefinitionTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings identifies the parameters associated with the included constraint
  definition relationship. The mappings relationship attribute shows how the
  parameter maps to the variable used.
  """
  mappings: [String]

}
type ConstraintDefinition_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input ConstraintDefinition_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input ConstraintDefinition_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input ConstraintDefinition_IncludedInConstraintDefinitionTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input ConstraintDefinition_IncludesConstraintDefinitionTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input ConstraintDefinition_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# Context definition
#########################################
type Context {
  identity: ContextID!
  attributes: ContextATTR
  parameters: [Parameter]
  relations: ContextREL
}
# for mutations
input Context_Input {
  operation: MutationOperation!
  identity: ContextID_Input!
  attributes: ContextATTR_Input
  parameters: [Parameter_Input]
  relations: ContextREL_Input
}
type ContextID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input ContextID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type ContextATTR {
  """
  Range identifies the range of values that the entity can assume.
  """
  range: String

  """
  Units identifies the units of measurement for the value of the entity.
  """
  units: String

  """
  Accuracy identifies how correct the value of the entity must be.
  """
  accuracy: String

  """
  Fields identifies the data fields contained within the item.
  """
  fields: [String]

  """
  Precision identifies the number of significant digits required for the value of
  the entity.
  """
  precision: String

  """
  Doc. PUID is the project unique identifier that is often used in system
  development specifications and documents to identify the same entity in multiple
  documents. This is not to be confused with the database entity unique
  identifier.
  """
  puid: String

  """
  Size indicates the estimated size (in sizeUnits) of this entity.
  """
  size: String

  """
  Size Units indicates the measurement units associated with this entity.
  """
  sizeUnits: String

  """
  Priority is used to identify the order of processing of an entity. High priority
  entities (larger numbers) are processed before low priority entities (smaller
  numbers).
  """
  priority: String

  """
  Type is the physical type of this entity.
  """
  type: ContextType

  """
  Title is the label to be used in formal documentation instead of the entity
  name.
  """
  title: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum ContextType {
  nil
  Analog
  Digital
  Physical
  Mixed
}
# for mutations
input ContextATTR_Input {
  range: String
  units: String
  accuracy: String
  fields: [String]
  precision: String
  puid: String
  size: String
  sizeUnits: String
  priority: String
  type: ContextType
  title: String
  description: String
}
type ContextREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [Context_CategorizedByTarget]

  """
  Mappings identifies the parameters associated with the constrained by
  relationship. The mappings relationship attribute shows how the parameter maps
  to the variable used.
  """
  constrainedBy: [Context_ConstrainedByTarget]

  """
  Decomposed by identifies the children of this entity.
  """
  decomposedBy: [Context_DecomposedByTarget]

  """
  Decomposes identifies the parent of this entity.
  """
  decomposes: [Context_DecomposesTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [Context_DocumentedByTarget]

  """
  Input to identifies the processing unit that transforms this entity.
  """
  inputTo: [Context_InputToTarget]

  """
  The Function / Link / Item enables detection of Loss Scenario.
  """
  maEnablesDetectionOf: [Context_MaEnablesDetectionOfTarget]

  """
  Context (process model) for unsafe action.
  """
  maProvidesProcessModelFor: [Context_MaProvidesProcessModelForTarget]

  """
  Output from identifies the processing unit that produces this entity.
  """
  outputFrom: [Context_OutputFromTarget]

  """
  An entity’s parameter is being referenced by a ConstraintDefinition.
  """
  parameterUsedIn: [Context_ParameterUsedInTarget]

  """
  Specified by identifies constraint and/or performance requirements that this
  entity must satisfy.
  """
  specifiedBy: [Context_SpecifiedByTarget]

  """
  Transferred by identifies the connection over which this entity is transported.
  """
  transferredBy: [Context_TransferredByTarget]

  """
  Triggers identifies the information units that enable a processing unit to begin
  execution.  A processing unit begins execution when it has received control
  enablement, all of its triggers have arrived, and its necessary resources are
  available.
  """
  triggers: [Context_TriggersTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [Context_UsesTarget]

  """
  Verified by points to the method of requirement proof which specifies the
  verification technique, level, and status.
  """
  verifiedBy: [Context_VerifiedByTarget]

}
# for mutations
input ContextREL_Input {
  categorizedBy: [Context_CategorizedByTarget_Input]
  constrainedBy: [Context_ConstrainedByTarget_Input]
  decomposedBy: [Context_DecomposedByTarget_Input]
  decomposes: [Context_DecomposesTarget_Input]
  documentedBy: [Context_DocumentedByTarget_Input]
  inputTo: [Context_InputToTarget_Input]
  maEnablesDetectionOf: [Context_MaEnablesDetectionOfTarget_Input]
  maProvidesProcessModelFor: [Context_MaProvidesProcessModelForTarget_Input]
  outputFrom: [Context_OutputFromTarget_Input]
  parameterUsedIn: [Context_ParameterUsedInTarget_Input]
  specifiedBy: [Context_SpecifiedByTarget_Input]
  transferredBy: [Context_TransferredByTarget_Input]
  triggers: [Context_TriggersTarget_Input]
  uses: [Context_UsesTarget_Input]
  verifiedBy: [Context_VerifiedByTarget_Input]
}
type Context_CategorizedByTarget {
  categoryTarget: CategoryID
}
type Context_ConstrainedByTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings show how the parameter maps to the variable used.
  """
  mappings: [String]

}
type Context_DecomposedByTarget {
  itemTarget: ItemID
}
type Context_DecomposesTarget {
  itemTarget: ItemID
}
type Context_DocumentedByTarget {
  documentTarget: DocumentID
}
type Context_InputToTarget {
  functionTarget: FunctionID
  """
  Queue Type specifies how the input entities should be ordered at the receiving
  unit.
  """
  queueType: Context_InputToQueueType

}
enum Context_InputToQueueType {
  FIFO
  LIFO
  Priority
  Reverse_Priority
}
type Context_MaEnablesDetectionOfTarget {
  lossScenarioTarget: LossScenarioID
  """
  constraint (=,<,>) for Item, Function, Link, Resource monitored by Sentinel
  """
  constraint: [String]

}
type Context_MaProvidesProcessModelForTarget {
  hazardousActionTarget: HazardousActionID
  """
  The process model attributes and values that define the "context" for the unsafe
  control action.
  """
  processModelAttributes: [String]

}
type Context_OutputFromTarget {
  functionTarget: FunctionID
}
type Context_ParameterUsedInTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings identifies the parameters associated with the uses parameter from
  relationship. The mappings relationship attribute shows how the parameter maps
  to the variable used.
  """
  mappings: [String]

}
type Context_SpecifiedByTarget {
  requirementTarget: RequirementID
  """
  The Governs relationship attribute identifies the Parameter attribute that is
  associated in both the Requirement entity and Component entity joined by the
  specified by / specifies relationship.
  """
  governs: String

}
type Context_TransferredByTarget {
  linkTarget: LinkID
}
type Context_TriggersTarget {
  functionTarget: FunctionID
  """
  Queue Type specifies how the triggering entities should queue up at the
  receiving processing unit.
  """
  queueType: Context_TriggersQueueType

}
enum Context_TriggersQueueType {
  FIFO
  LIFO
  Priority
  Reverse_Priority
}
type Context_UsesTarget {
  definedTermTarget: DefinedTermID
}
type Context_VerifiedByTarget {
  verificationRequirementTarget: VerificationRequirementID
}
# for mutations
input Context_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input Context_ConstrainedByTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input Context_DecomposedByTarget_Input {
  operation: MutationOperation!
  itemTarget: ItemID_Input
}
input Context_DecomposesTarget_Input {
  operation: MutationOperation!
  itemTarget: ItemID_Input
}
input Context_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Context_InputToTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
  queueType: Context_InputToQueueType
}
input Context_MaEnablesDetectionOfTarget_Input {
  operation: MutationOperation!
  lossScenarioTarget: LossScenarioID_Input
  constraint: [String]
}
input Context_MaProvidesProcessModelForTarget_Input {
  operation: MutationOperation!
  hazardousActionTarget: HazardousActionID_Input
  processModelAttributes: [String]
}
input Context_OutputFromTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
}
input Context_ParameterUsedInTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input Context_SpecifiedByTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
  governs: String
}
input Context_TransferredByTarget_Input {
  operation: MutationOperation!
  linkTarget: LinkID_Input
}
input Context_TriggersTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
  queueType: Context_TriggersQueueType
}
input Context_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
input Context_VerifiedByTarget_Input {
  operation: MutationOperation!
  verificationRequirementTarget: VerificationRequirementID_Input
}
#########################################
# ControlAction definition
#########################################
type ControlAction {
  identity: ControlActionID!
  attributes: ControlActionATTR
  parameters: [Parameter]
  relations: ControlActionREL
}
# for mutations
input ControlAction_Input {
  operation: MutationOperation!
  identity: ControlActionID_Input!
  attributes: ControlActionATTR_Input
  parameters: [Parameter_Input]
  relations: ControlActionREL_Input
}
type ControlActionID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input ControlActionID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type ControlActionATTR {
  """
  Range identifies the range of values that the entity can assume.
  """
  range: String

  """
  Units identifies the units of measurement for the value of the entity.
  """
  units: String

  """
  Accuracy identifies how correct the value of the entity must be.
  """
  accuracy: String

  """
  Fields identifies the data fields contained within the item.
  """
  fields: [String]

  """
  Precision identifies the number of significant digits required for the value of
  the entity.
  """
  precision: String

  """
  Doc. PUID is the project unique identifier that is often used in system
  development specifications and documents to identify the same entity in multiple
  documents. This is not to be confused with the database entity unique
  identifier.
  """
  puid: String

  """
  Size indicates the estimated size (in sizeUnits) of this entity.
  """
  size: String

  """
  Size Units indicates the measurement units associated with this entity.
  """
  sizeUnits: String

  """
  Priority is used to identify the order of processing of an entity. High priority
  entities (larger numbers) are processed before low priority entities (smaller
  numbers).
  """
  priority: String

  """
  Type is the physical type of this entity.
  """
  type: ControlActionType

  """
  Title is the label to be used in formal documentation instead of the entity
  name.
  """
  title: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum ControlActionType {
  nil
  Analog
  Digital
  Physical
  Mixed
}
# for mutations
input ControlActionATTR_Input {
  range: String
  units: String
  accuracy: String
  fields: [String]
  precision: String
  puid: String
  size: String
  sizeUnits: String
  priority: String
  type: ControlActionType
  title: String
  description: String
}
type ControlActionREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [ControlAction_CategorizedByTarget]

  """
  Mappings identifies the parameters associated with the constrained by
  relationship. The mappings relationship attribute shows how the parameter maps
  to the variable used.
  """
  constrainedBy: [ControlAction_ConstrainedByTarget]

  """
  Decomposed by identifies the children of this entity.
  """
  decomposedBy: [ControlAction_DecomposedByTarget]

  """
  Decomposes identifies the parent of this entity.
  """
  decomposes: [ControlAction_DecomposesTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [ControlAction_DocumentedByTarget]

  """
  Input to identifies the processing unit that transforms this entity.
  """
  inputTo: [ControlAction_InputToTarget]

  """
  The Function / Link / Item enables detection of Loss Scenario.
  """
  maEnablesDetectionOf: [ControlAction_MaEnablesDetectionOfTarget]

  """
  Entity may have analysis variations.
  """
  maHasVariation: [ControlAction_MaHasVariationTarget]

  """
  The control action which manages (enable / disable  test) the resilient mode.
  """
  maManages: [ControlAction_MaManagesTarget]

  """
  Output from identifies the processing unit that produces this entity.
  """
  outputFrom: [ControlAction_OutputFromTarget]

  """
  An entity’s parameter is being referenced by a ConstraintDefinition.
  """
  parameterUsedIn: [ControlAction_ParameterUsedInTarget]

  """
  Specified by identifies constraint and/or performance requirements that this
  entity must satisfy.
  """
  specifiedBy: [ControlAction_SpecifiedByTarget]

  """
  Transferred by identifies the connection over which this entity is transported.
  """
  transferredBy: [ControlAction_TransferredByTarget]

  """
  Triggers identifies the information units that enable a processing unit to begin
  execution.  A processing unit begins execution when it has received control
  enablement, all of its triggers have arrived, and its necessary resources are
  available.
  """
  triggers: [ControlAction_TriggersTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [ControlAction_UsesTarget]

  """
  Verified by points to the method of requirement proof which specifies the
  verification technique, level, and status.
  """
  verifiedBy: [ControlAction_VerifiedByTarget]

}
# for mutations
input ControlActionREL_Input {
  categorizedBy: [ControlAction_CategorizedByTarget_Input]
  constrainedBy: [ControlAction_ConstrainedByTarget_Input]
  decomposedBy: [ControlAction_DecomposedByTarget_Input]
  decomposes: [ControlAction_DecomposesTarget_Input]
  documentedBy: [ControlAction_DocumentedByTarget_Input]
  inputTo: [ControlAction_InputToTarget_Input]
  maEnablesDetectionOf: [ControlAction_MaEnablesDetectionOfTarget_Input]
  maHasVariation: [ControlAction_MaHasVariationTarget_Input]
  maManages: [ControlAction_MaManagesTarget_Input]
  outputFrom: [ControlAction_OutputFromTarget_Input]
  parameterUsedIn: [ControlAction_ParameterUsedInTarget_Input]
  specifiedBy: [ControlAction_SpecifiedByTarget_Input]
  transferredBy: [ControlAction_TransferredByTarget_Input]
  triggers: [ControlAction_TriggersTarget_Input]
  uses: [ControlAction_UsesTarget_Input]
  verifiedBy: [ControlAction_VerifiedByTarget_Input]
}
type ControlAction_CategorizedByTarget {
  categoryTarget: CategoryID
}
type ControlAction_ConstrainedByTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings show how the parameter maps to the variable used.
  """
  mappings: [String]

}
type ControlAction_DecomposedByTarget {
  itemTarget: ItemID
}
type ControlAction_DecomposesTarget {
  itemTarget: ItemID
}
type ControlAction_DocumentedByTarget {
  documentTarget: DocumentID
}
type ControlAction_InputToTarget {
  functionTarget: FunctionID
  """
  Queue Type specifies how the input entities should be ordered at the receiving
  unit.
  """
  queueType: ControlAction_InputToQueueType

}
enum ControlAction_InputToQueueType {
  FIFO
  LIFO
  Priority
  Reverse_Priority
}
type ControlAction_MaEnablesDetectionOfTarget {
  lossScenarioTarget: LossScenarioID
  """
  constraint (=,<,>) for Item, Function, Link, Resource monitored by Sentinel
  """
  constraint: [String]

}
type ControlAction_MaHasVariationTarget {
  hazardousActionTarget: HazardousActionID
}
type ControlAction_MaManagesTarget {
  resilientModeTarget: ResilientModeID
  """
  The management action type for the resilient mode.
  """
  actionType: ControlAction_MaManagesActionType

}
enum ControlAction_MaManagesActionType {
  nil
  activate
  deactivate
  selfTest
}
type ControlAction_OutputFromTarget {
  functionTarget: FunctionID
}
type ControlAction_ParameterUsedInTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings identifies the parameters associated with the uses parameter from
  relationship. The mappings relationship attribute shows how the parameter maps
  to the variable used.
  """
  mappings: [String]

}
type ControlAction_SpecifiedByTarget {
  requirementTarget: RequirementID
  """
  The Governs relationship attribute identifies the Parameter attribute that is
  associated in both the Requirement entity and Component entity joined by the
  specified by / specifies relationship.
  """
  governs: String

}
type ControlAction_TransferredByTarget {
  linkTarget: LinkID
}
type ControlAction_TriggersTarget {
  functionTarget: FunctionID
  """
  Queue Type specifies how the triggering entities should queue up at the
  receiving processing unit.
  """
  queueType: ControlAction_TriggersQueueType

}
enum ControlAction_TriggersQueueType {
  FIFO
  LIFO
  Priority
  Reverse_Priority
}
type ControlAction_UsesTarget {
  definedTermTarget: DefinedTermID
}
type ControlAction_VerifiedByTarget {
  verificationRequirementTarget: VerificationRequirementID
}
# for mutations
input ControlAction_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input ControlAction_ConstrainedByTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input ControlAction_DecomposedByTarget_Input {
  operation: MutationOperation!
  itemTarget: ItemID_Input
}
input ControlAction_DecomposesTarget_Input {
  operation: MutationOperation!
  itemTarget: ItemID_Input
}
input ControlAction_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input ControlAction_InputToTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
  queueType: ControlAction_InputToQueueType
}
input ControlAction_MaEnablesDetectionOfTarget_Input {
  operation: MutationOperation!
  lossScenarioTarget: LossScenarioID_Input
  constraint: [String]
}
input ControlAction_MaHasVariationTarget_Input {
  operation: MutationOperation!
  hazardousActionTarget: HazardousActionID_Input
}
input ControlAction_MaManagesTarget_Input {
  operation: MutationOperation!
  resilientModeTarget: ResilientModeID_Input
  actionType: ControlAction_MaManagesActionType
}
input ControlAction_OutputFromTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
}
input ControlAction_ParameterUsedInTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input ControlAction_SpecifiedByTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
  governs: String
}
input ControlAction_TransferredByTarget_Input {
  operation: MutationOperation!
  linkTarget: LinkID_Input
}
input ControlAction_TriggersTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
  queueType: ControlAction_TriggersQueueType
}
input ControlAction_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
input ControlAction_VerifiedByTarget_Input {
  operation: MutationOperation!
  verificationRequirementTarget: VerificationRequirementID_Input
}
#########################################
# DefinedTerm definition
#########################################
type DefinedTerm {
  identity: DefinedTermID!
  attributes: DefinedTermATTR
  parameters: [Parameter]
  relations: DefinedTermREL
}
# for mutations
input DefinedTerm_Input {
  operation: MutationOperation!
  identity: DefinedTermID_Input!
  attributes: DefinedTermATTR_Input
  parameters: [Parameter_Input]
  relations: DefinedTermREL_Input
}
type DefinedTermID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input DefinedTermID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type DefinedTermATTR {
  """
  Acronym identifies the word being defined by the entity.
  """
  acronym: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
# for mutations
input DefinedTermATTR_Input {
  acronym: String
  description: String
}
type DefinedTermREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [DefinedTerm_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [DefinedTerm_DocumentedByTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [DefinedTerm_UsesTarget]

}
# for mutations
input DefinedTermREL_Input {
  categorizedBy: [DefinedTerm_CategorizedByTarget_Input]
  documentedBy: [DefinedTerm_DocumentedByTarget_Input]
  uses: [DefinedTerm_UsesTarget_Input]
}
type DefinedTerm_CategorizedByTarget {
  categoryTarget: CategoryID
}
type DefinedTerm_DocumentedByTarget {
  documentTarget: DocumentID
}
type DefinedTerm_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input DefinedTerm_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input DefinedTerm_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input DefinedTerm_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# Document definition
#########################################
type Document {
  identity: DocumentID!
  attributes: DocumentATTR
  parameters: [Parameter]
  relations: DocumentREL
}
# for mutations
input Document_Input {
  operation: MutationOperation!
  identity: DocumentID_Input!
  attributes: DocumentATTR_Input
  parameters: [Parameter_Input]
  relations: DocumentREL_Input
}
type DocumentID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input DocumentID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type DocumentATTR {
  """
  Document Date is the document's publication date.
  """
  documentDate: String

  """
  Non-Govt. Category specifies the heading for non-government applicable
  documents. For example, SPECIFICATIONS is a heading under which this reference
  document will be listed.
  """
  nonGovernmentCategory: DocumentNonGovernmentCategory

  """
  Contract Line Item Number is a reference to the contract's identification for
  the specific items and services requiring separate pricing.
  """
  clin: String

  """
  External File Path contains the external file reference in either standard
  (c:/myDirectory/mySubDirectory/filename) or UNC (//Server/directory/filename)
  format.
  """
  externalFilePath: String

  """
  Document Number is the reference number assigned to the document.
  """
  documentNumber: String

  """
  Title is the label to be used for the document title instead of one derived by
  the script when generating a document from the database.
  """
  title: String

  """
  Contains a full summarization of the system's capabilities, functions, or
  features within this document.
  """
  identification: String

  """
  Govt. Category specifies the headings/subheadings for government applicable
  documents. For example, SPECIFICATIONS is a heading and Military is the
  subheading under which this reference document will be listed.
  """
  governmentCategory: DocumentGovernmentCategory

  """
  Provides a value representing the current level of cumulative document changes.
  """
  revisionNumber: String

  """
  CDRL Number is the contract deliverable identifier for the document.
  """
  cdrlNumber: String

  """
  Summarizes the purpose and contents of this document and also describes any
  security or privacy considerations associated with its use.
  """
  documentOverview: String

  """
  Doc. Report designates which formal documentation report is used to generate
  this document.
  """
  documentScript: DocumentDocumentScript

  """
  Type identifies the type of document.
  """
  type: DocumentType

  """
  Contains the contextual framework or extent of this document's information
  content.
  """
  scope: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum DocumentNonGovernmentCategory {
  nil
  SPECIFICATIONS
  STANDARDS
  DRAWINGS
  OTHER_PUBLICATIONS
}
enum DocumentGovernmentCategory {
  nil
  SPECIFICATIONS_Military
  SPECIFICATIONS_Federal
  SPECIFICATIONS_Other_Government_Agency
  STANDARDS_Military
  STANDARDS_Federal
  STANDARDS_Other_Government_Agency
  DRAWINGS
  OTHER_PUBLICATIONS_Manual
  OTHER_PUBLICATIONS_Regulation
  OTHER_PUBLICATIONS_Handbook
  OTHER_PUBLICATIONS_Bulletin
  OTHER_PUBLICATIONS_Other
}
enum DocumentDocumentScript {
  nil
  IRS
  SRS
  Other
  SSDD
  SSS
  TEP
}
enum DocumentType {
  nil
  Agreement
  Change_Notice
  Change_Request
  Drawing
  Goal
  Guidance
  Information_Asset
  Interface_Control_Document
  Interface_Requirements_Specification
  Meeting_Minutes
  Procurement_Specification
  Project_Memo
  Regulatory
  Risk_Mitigation_Plan
  Service_Level_Specification
  Software_Requirements_Specification
  Standard
  Statement_of_Work
  Strategy
  System_Requirements_Document
  System_Segment_Design_Document
  System_Segment_Specification
  Test__Evaluation_Master_Plan
  Test__Evaluation_Plan
  Test__Evaluation_Report
  Threat
  Trade_Study
}
# for mutations
input DocumentATTR_Input {
  documentDate: String
  nonGovernmentCategory: DocumentNonGovernmentCategory
  clin: String
  externalFilePath: String
  documentNumber: String
  title: String
  identification: String
  governmentCategory: DocumentGovernmentCategory
  revisionNumber: String
  cdrlNumber: String
  documentOverview: String
  documentScript: DocumentDocumentScript
  type: DocumentType
  scope: String
  description: String
}
type DocumentREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [Document_CategorizedByTarget]

  """
  Documents identifies the entities which are specified in or enhanced by this
  external source document.
  """
  documents: [Document_DocumentsTarget]

  """
  Referenced by identifies documents for which the subject document is an
  applicable or reference document.
  """
  referencedBy: [Document_ReferencedByTarget]

  """
  References identifies the applicable or reference document for the subject
  document. This relation is appropriate for documents that are generated from the
  contents of the database.
  """
  references: [Document_ReferencesTarget]

  """
  Refined by identifies the children of this entity.
  """
  refinedBy: [Document_RefinedByTarget]

  """
  Refines identifies the parent of this entity.
  """
  refines: [Document_RefinesTarget]

  """
  Reports on identifies the entities that form the basis for the documentation.
  """
  reportsOn: [Document_ReportsOnTarget]

  """
  Traced from identifies a higher-level document from which the requirements in
  the subject document should be associated.
  """
  tracedFrom: [Document_TracedFromTarget]

  """
  Traces to identifies a lower-level document to which the requirements in the
  subject document should be associated.
  """
  tracesTo: [Document_TracesToTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [Document_UsesTarget]

}
# for mutations
input DocumentREL_Input {
  categorizedBy: [Document_CategorizedByTarget_Input]
  documents: [Document_DocumentsTarget_Input]
  referencedBy: [Document_ReferencedByTarget_Input]
  references: [Document_ReferencesTarget_Input]
  refinedBy: [Document_RefinedByTarget_Input]
  refines: [Document_RefinesTarget_Input]
  reportsOn: [Document_ReportsOnTarget_Input]
  tracedFrom: [Document_TracedFromTarget_Input]
  tracesTo: [Document_TracesToTarget_Input]
  uses: [Document_UsesTarget_Input]
}
type Document_CategorizedByTarget {
  categoryTarget: CategoryID
}
type Document_DocumentsTarget {
  definedTermTarget: DefinedTermID
}
type Document_ReferencedByTarget {
  documentTarget: DocumentID
}
type Document_ReferencesTarget {
  documentTarget: DocumentID
}
type Document_RefinedByTarget {
  documentTarget: DocumentID
}
type Document_RefinesTarget {
  documentTarget: DocumentID
}
type Document_ReportsOnTarget {
  linkTarget: LinkID
  verificationRequirementTarget: VerificationRequirementID
}
type Document_TracedFromTarget {
  documentTarget: DocumentID
}
type Document_TracesToTarget {
  documentTarget: DocumentID
}
type Document_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input Document_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input Document_DocumentsTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
input Document_ReferencedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Document_ReferencesTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Document_RefinedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Document_RefinesTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Document_ReportsOnTarget_Input {
  operation: MutationOperation!
  linkTarget: LinkID_Input
  verificationRequirementTarget: VerificationRequirementID_Input
}
input Document_TracedFromTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Document_TracesToTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Document_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# DomainSet definition
#########################################
type DomainSet {
  identity: DomainSetID!
  attributes: DomainSetATTR
  parameters: [Parameter]
  relations: DomainSetREL
}
# for mutations
input DomainSet_Input {
  operation: MutationOperation!
  identity: DomainSetID_Input!
  attributes: DomainSetATTR_Input
  parameters: [Parameter_Input]
  relations: DomainSetREL_Input
}
type DomainSetID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input DomainSetID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type DomainSetATTR {
  """
  Count specifies the number of iterations or replications depending upon the
  associated construct.
  """
  count: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
# for mutations
input DomainSetATTR_Input {
  count: String
  description: String
}
type DomainSetREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [DomainSet_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [DomainSet_DocumentedByTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [DomainSet_UsesTarget]

}
# for mutations
input DomainSetREL_Input {
  categorizedBy: [DomainSet_CategorizedByTarget_Input]
  documentedBy: [DomainSet_DocumentedByTarget_Input]
  uses: [DomainSet_UsesTarget_Input]
}
type DomainSet_CategorizedByTarget {
  categoryTarget: CategoryID
}
type DomainSet_DocumentedByTarget {
  documentTarget: DocumentID
}
type DomainSet_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input DomainSet_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input DomainSet_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input DomainSet_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# Exit definition
#########################################
type Exit {
  identity: ExitID!
  attributes: ExitATTR
  parameters: [Parameter]
  relations: ExitREL
}
# for mutations
input Exit_Input {
  operation: MutationOperation!
  identity: ExitID_Input!
  attributes: ExitATTR_Input
  parameters: [Parameter_Input]
  relations: ExitREL_Input
}
type ExitID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input ExitID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type ExitATTR {
  """
  Description is the written statement of this entity.
  """
  description: String

}
# for mutations
input ExitATTR_Input {
  description: String
}
type ExitREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [Exit_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [Exit_DocumentedByTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [Exit_UsesTarget]

}
# for mutations
input ExitREL_Input {
  categorizedBy: [Exit_CategorizedByTarget_Input]
  documentedBy: [Exit_DocumentedByTarget_Input]
  uses: [Exit_UsesTarget_Input]
}
type Exit_CategorizedByTarget {
  categoryTarget: CategoryID
}
type Exit_DocumentedByTarget {
  documentTarget: DocumentID
}
type Exit_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input Exit_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input Exit_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Exit_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# Feedback definition
#########################################
type Feedback {
  identity: FeedbackID!
  attributes: FeedbackATTR
  parameters: [Parameter]
  relations: FeedbackREL
}
# for mutations
input Feedback_Input {
  operation: MutationOperation!
  identity: FeedbackID_Input!
  attributes: FeedbackATTR_Input
  parameters: [Parameter_Input]
  relations: FeedbackREL_Input
}
type FeedbackID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input FeedbackID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type FeedbackATTR {
  """
  Range identifies the range of values that the entity can assume.
  """
  range: String

  """
  Units identifies the units of measurement for the value of the entity.
  """
  units: String

  """
  Accuracy identifies how correct the value of the entity must be.
  """
  accuracy: String

  """
  Fields identifies the data fields contained within the item.
  """
  fields: [String]

  """
  Precision identifies the number of significant digits required for the value of
  the entity.
  """
  precision: String

  """
  Doc. PUID is the project unique identifier that is often used in system
  development specifications and documents to identify the same entity in multiple
  documents. This is not to be confused with the database entity unique
  identifier.
  """
  puid: String

  """
  Size indicates the estimated size (in sizeUnits) of this entity.
  """
  size: String

  """
  Size Units indicates the measurement units associated with this entity.
  """
  sizeUnits: String

  """
  Priority is used to identify the order of processing of an entity. High priority
  entities (larger numbers) are processed before low priority entities (smaller
  numbers).
  """
  priority: String

  """
  Type is the physical type of this entity.
  """
  type: FeedbackType

  """
  Title is the label to be used in formal documentation instead of the entity
  name.
  """
  title: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum FeedbackType {
  nil
  Analog
  Digital
  Physical
  Mixed
}
# for mutations
input FeedbackATTR_Input {
  range: String
  units: String
  accuracy: String
  fields: [String]
  precision: String
  puid: String
  size: String
  sizeUnits: String
  priority: String
  type: FeedbackType
  title: String
  description: String
}
type FeedbackREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [Feedback_CategorizedByTarget]

  """
  Mappings identifies the parameters associated with the constrained by
  relationship. The mappings relationship attribute shows how the parameter maps
  to the variable used.
  """
  constrainedBy: [Feedback_ConstrainedByTarget]

  """
  Decomposed by identifies the children of this entity.
  """
  decomposedBy: [Feedback_DecomposedByTarget]

  """
  Decomposes identifies the parent of this entity.
  """
  decomposes: [Feedback_DecomposesTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [Feedback_DocumentedByTarget]

  """
  Input to identifies the processing unit that transforms this entity.
  """
  inputTo: [Feedback_InputToTarget]

  """
  The Function / Link / Item enables detection of Loss Scenario.
  """
  maEnablesDetectionOf: [Feedback_MaEnablesDetectionOfTarget]

  """
  Output from identifies the processing unit that produces this entity.
  """
  outputFrom: [Feedback_OutputFromTarget]

  """
  An entity’s parameter is being referenced by a ConstraintDefinition.
  """
  parameterUsedIn: [Feedback_ParameterUsedInTarget]

  """
  Specified by identifies constraint and/or performance requirements that this
  entity must satisfy.
  """
  specifiedBy: [Feedback_SpecifiedByTarget]

  """
  Transferred by identifies the connection over which this entity is transported.
  """
  transferredBy: [Feedback_TransferredByTarget]

  """
  Triggers identifies the information units that enable a processing unit to begin
  execution.  A processing unit begins execution when it has received control
  enablement, all of its triggers have arrived, and its necessary resources are
  available.
  """
  triggers: [Feedback_TriggersTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [Feedback_UsesTarget]

  """
  Verified by points to the method of requirement proof which specifies the
  verification technique, level, and status.
  """
  verifiedBy: [Feedback_VerifiedByTarget]

}
# for mutations
input FeedbackREL_Input {
  categorizedBy: [Feedback_CategorizedByTarget_Input]
  constrainedBy: [Feedback_ConstrainedByTarget_Input]
  decomposedBy: [Feedback_DecomposedByTarget_Input]
  decomposes: [Feedback_DecomposesTarget_Input]
  documentedBy: [Feedback_DocumentedByTarget_Input]
  inputTo: [Feedback_InputToTarget_Input]
  maEnablesDetectionOf: [Feedback_MaEnablesDetectionOfTarget_Input]
  outputFrom: [Feedback_OutputFromTarget_Input]
  parameterUsedIn: [Feedback_ParameterUsedInTarget_Input]
  specifiedBy: [Feedback_SpecifiedByTarget_Input]
  transferredBy: [Feedback_TransferredByTarget_Input]
  triggers: [Feedback_TriggersTarget_Input]
  uses: [Feedback_UsesTarget_Input]
  verifiedBy: [Feedback_VerifiedByTarget_Input]
}
type Feedback_CategorizedByTarget {
  categoryTarget: CategoryID
}
type Feedback_ConstrainedByTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings show how the parameter maps to the variable used.
  """
  mappings: [String]

}
type Feedback_DecomposedByTarget {
  itemTarget: ItemID
}
type Feedback_DecomposesTarget {
  itemTarget: ItemID
}
type Feedback_DocumentedByTarget {
  documentTarget: DocumentID
}
type Feedback_InputToTarget {
  functionTarget: FunctionID
  """
  Queue Type specifies how the input entities should be ordered at the receiving
  unit.
  """
  queueType: Feedback_InputToQueueType

}
enum Feedback_InputToQueueType {
  FIFO
  LIFO
  Priority
  Reverse_Priority
}
type Feedback_MaEnablesDetectionOfTarget {
  lossScenarioTarget: LossScenarioID
  """
  constraint (=,<,>) for Item, Function, Link, Resource monitored by Sentinel
  """
  constraint: [String]

}
type Feedback_OutputFromTarget {
  functionTarget: FunctionID
}
type Feedback_ParameterUsedInTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings identifies the parameters associated with the uses parameter from
  relationship. The mappings relationship attribute shows how the parameter maps
  to the variable used.
  """
  mappings: [String]

}
type Feedback_SpecifiedByTarget {
  requirementTarget: RequirementID
  """
  The Governs relationship attribute identifies the Parameter attribute that is
  associated in both the Requirement entity and Component entity joined by the
  specified by / specifies relationship.
  """
  governs: String

}
type Feedback_TransferredByTarget {
  linkTarget: LinkID
}
type Feedback_TriggersTarget {
  functionTarget: FunctionID
  """
  Queue Type specifies how the triggering entities should queue up at the
  receiving processing unit.
  """
  queueType: Feedback_TriggersQueueType

}
enum Feedback_TriggersQueueType {
  FIFO
  LIFO
  Priority
  Reverse_Priority
}
type Feedback_UsesTarget {
  definedTermTarget: DefinedTermID
}
type Feedback_VerifiedByTarget {
  verificationRequirementTarget: VerificationRequirementID
}
# for mutations
input Feedback_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input Feedback_ConstrainedByTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input Feedback_DecomposedByTarget_Input {
  operation: MutationOperation!
  itemTarget: ItemID_Input
}
input Feedback_DecomposesTarget_Input {
  operation: MutationOperation!
  itemTarget: ItemID_Input
}
input Feedback_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Feedback_InputToTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
  queueType: Feedback_InputToQueueType
}
input Feedback_MaEnablesDetectionOfTarget_Input {
  operation: MutationOperation!
  lossScenarioTarget: LossScenarioID_Input
  constraint: [String]
}
input Feedback_OutputFromTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
}
input Feedback_ParameterUsedInTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input Feedback_SpecifiedByTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
  governs: String
}
input Feedback_TransferredByTarget_Input {
  operation: MutationOperation!
  linkTarget: LinkID_Input
}
input Feedback_TriggersTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
  queueType: Feedback_TriggersQueueType
}
input Feedback_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
input Feedback_VerifiedByTarget_Input {
  operation: MutationOperation!
  verificationRequirementTarget: VerificationRequirementID_Input
}
#########################################
# Function definition
#########################################
type Function {
  identity: FunctionID!
  attributes: FunctionATTR
  parameters: [Parameter]
  relations: FunctionREL
}
# for mutations
input Function_Input {
  operation: MutationOperation!
  identity: FunctionID_Input!
  attributes: FunctionATTR_Input
  parameters: [Parameter_Input]
  relations: FunctionREL_Input
}
type FunctionID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input FunctionID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type FunctionATTR {
  """
  Doc. PUID is the project unique identifier that is often used in system
  development specifications and documents to identify the same entity in multiple
  documents. This is not to be confused with the database entity unique
  identifier.
  """
  puid: String

  """
  Duration is the time that this processing unit takes to complete.
  """
  duration: String

  """
  Execute Decomposition designates whether or not the decomposition of the entity
  should be included when performing a dynamic analysis.
  """
  executeDecomposition: Boolean

  """
  Log Message defines text to be placed in the simulation transcript upon
  execution of the unit.
  """
  logMessage: String

  """
  Timeout is a duration. If it is set, a processing unit that has been enabled but
  not started for that duration should terminate.
  """
  timeout: String

  """
  Title is the label to be used in formal documentation instead of the entity
  name.
  """
  title: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
# for mutations
input FunctionATTR_Input {
  puid: String
  duration: String
  executeDecomposition: Boolean
  logMessage: String
  timeout: String
  title: String
  description: String
}
type FunctionREL {
  """
  Allocated to identifies the entity that implements this processing unit.
  """
  allocatedTo: [Function_AllocatedToTarget]

  """
  Based on identifies the needs that this entity fulfills in whole or in part.
  """
  basedOn: [Function_BasedOnTarget]

  """
  Captures identifies resources that this object requires (but does not destroy)
  during execution. Resources are captured when the execution of the processing
  unit begins and released when it completes execution.
  """
  captures: [Function_CapturesTarget]

  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [Function_CategorizedByTarget]

  """
  Mappings identifies the parameters associated with the constrained by
  relationship. The mappings relationship attribute shows how the parameter maps
  to the variable used.
  """
  constrainedBy: [Function_ConstrainedByTarget]

  """
  Consumes identifies resources which this object requires (and destroys) during
  execution. Resources are consumed when the execution of the processing unit
  begins.
  """
  consumes: [Function_ConsumesTarget]

  """
  Decomposed by identifies the children of this entity.
  """
  decomposedBy: [Function_DecomposedByTarget]

  """
  Decomposes identifies the parent of this entity.
  """
  decomposes: [Function_DecomposesTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [Function_DocumentedByTarget]

  """
  Elaborates identifies the use case for which this entity provides the detailed
  behavioral model.
  """
  elaborates: [Function_ElaboratesTarget]

  """
  Exits by identifies the set of mutually exclusive exits for this entity.
  """
  exitsBy: [Function_ExitsByTarget]

  """
  Incorporated by identifies the source entity as contributing to the destination
  entity.
  """
  incorporatedBy: [Function_IncorporatedByTarget]

  """
  Inputs identifies the entities that are transformed by this processing unit.
  """
  inputs: [Function_InputsTarget]

  """
  The Function / Link / Item enables detection of Loss Scenario.
  """
  maEnablesDetectionOf: [Function_MaEnablesDetectionOfTarget]

  """
  A failed / cyber attacked "system" Function is recovered by a ReslientMode.
  """
  maIsRecoveredBy: [Function_MaIsRecoveredByTarget]

  """
  The control action which manages (enable / disable  test) the resilient mode.
  """
  maManages: [Function_MaManagesTarget]

  """
  Outputs identifies the products of the transformation carried out by this
  processing unit.
  """
  outputs: [Function_OutputsTarget]

  """
  An entity’s parameter is being referenced by a ConstraintDefinition.
  """
  parameterUsedIn: [Function_ParameterUsedInTarget]

  """
  Produces identifies resources generated by the processing unit. Resources are
  produced when the execution of the processing unit completes.
  """
  produces: [Function_ProducesTarget]

  """
  Thread functions are reflected in a complex function in the integrated behavior
  model.
  """
  reflectedIn: [Function_ReflectedInTarget]

  """
  As the behavior model develops a complex function reflects one or more thread
  functions.
  """
  reflects: [Function_ReflectsTarget]

  """
  Relates to is maintained automatically for the purpose of consistency.
  """
  relatesTo: [Function_RelatesToTarget]

  """
  Services identifies the connection supported by this processing unit.
  """
  services: [Function_ServicesTarget]

  """
  Specified by identifies constraint and/or performance requirements that this
  entity must satisfy.
  """
  specifiedBy: [Function_SpecifiedByTarget]

  """
  Triggered by identifies the processing units that are enabled by this entity.  A
  processing unit begins execution when it has received control enablement, all of
  its triggers have arrived, and its necessary resources are available.
  """
  triggeredBy: [Function_TriggeredByTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [Function_UsesTarget]

  """
  Verified by points to the method of requirement proof which specifies the
  verification technique, level, and status.
  """
  verifiedBy: [Function_VerifiedByTarget]

}
# for mutations
input FunctionREL_Input {
  allocatedTo: [Function_AllocatedToTarget_Input]
  basedOn: [Function_BasedOnTarget_Input]
  captures: [Function_CapturesTarget_Input]
  categorizedBy: [Function_CategorizedByTarget_Input]
  constrainedBy: [Function_ConstrainedByTarget_Input]
  consumes: [Function_ConsumesTarget_Input]
  decomposedBy: [Function_DecomposedByTarget_Input]
  decomposes: [Function_DecomposesTarget_Input]
  documentedBy: [Function_DocumentedByTarget_Input]
  elaborates: [Function_ElaboratesTarget_Input]
  exitsBy: [Function_ExitsByTarget_Input]
  incorporatedBy: [Function_IncorporatedByTarget_Input]
  inputs: [Function_InputsTarget_Input]
  maEnablesDetectionOf: [Function_MaEnablesDetectionOfTarget_Input]
  maIsRecoveredBy: [Function_MaIsRecoveredByTarget_Input]
  maManages: [Function_MaManagesTarget_Input]
  outputs: [Function_OutputsTarget_Input]
  parameterUsedIn: [Function_ParameterUsedInTarget_Input]
  produces: [Function_ProducesTarget_Input]
  reflectedIn: [Function_ReflectedInTarget_Input]
  reflects: [Function_ReflectsTarget_Input]
  relatesTo: [Function_RelatesToTarget_Input]
  services: [Function_ServicesTarget_Input]
  specifiedBy: [Function_SpecifiedByTarget_Input]
  triggeredBy: [Function_TriggeredByTarget_Input]
  uses: [Function_UsesTarget_Input]
  verifiedBy: [Function_VerifiedByTarget_Input]
}
type Function_AllocatedToTarget {
  componentTarget: ComponentID
  """
  Behavior Type classifies the mapping of the processing unit to the
  implementation unit.
  """
  behaviorType: Function_AllocatedToBehaviorType

}
enum Function_AllocatedToBehaviorType {
  Atomic
  Integrated_Root
  Thread
}
type Function_BasedOnTarget {
  requirementTarget: RequirementID
}
type Function_CapturesTarget {
  resourceTarget: ResourceID
  """
  Acquire Available indicates whether or not the associated processing unit will
  acquire any available resources while waiting for the full amount required for
  execution.
  """
  acquireAvailable: Boolean

  """
  Amount indicates how much of the resource is captured by the processing unit
  """
  amount: String

}
type Function_CategorizedByTarget {
  categoryTarget: CategoryID
}
type Function_ConstrainedByTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings show how the parameter maps to the variable used.
  """
  mappings: [String]

}
type Function_ConsumesTarget {
  resourceTarget: ResourceID
  """
  Amount indicates how much of the resource is consumed by the processing unit.
  """
  amount: String

  """
  Acquire Available indicates whether or not the associated processing unit will
  acquire any available resources while waiting for the full amount required for
  execution.
  """
  acquireAvailable: Boolean

}
type Function_DecomposedByTarget {
  functionTarget: FunctionID
}
type Function_DecomposesTarget {
  functionTarget: FunctionID
}
type Function_DocumentedByTarget {
  documentTarget: DocumentID
}
type Function_ElaboratesTarget {
  lossScenarioTarget: LossScenarioID
  useCaseTarget: UseCaseID
  """
  Flow type indicates if this elaboration represents the primary flow or alternate
  flow.
  """
  flowType: Function_ElaboratesFlowType

}
enum Function_ElaboratesFlowType {
  Alternate
  Primary
}
type Function_ExitsByTarget {
  exitTarget: ExitID
  """
  Selection Probability indicates the likelihood of exiting the processing unit
  via this exit. Note that the selection probability need not be normalized (i.e.,
  the sum of probabilities for all exits does not have to be 1.0). Normalization
  will occur automatically upon simulation.
  """
  selectionProbability: Float

  """
  Type characterizes the exit.
  """
  type: Function_ExitsByType

}
enum Function_ExitsByType {
  Normal
  Exception
  Timeout
}
type Function_IncorporatedByTarget {
  stateTarget: StateID
  """
  Behavior Type classifies the mapping between the source and destination
  entities.
  """
  behaviorType: Function_IncorporatedByBehaviorType

}
enum Function_IncorporatedByBehaviorType {
  Atomic
  Integrated_Root
  Entry
  Exit
}
type Function_InputsTarget {
  itemTarget: ItemID
  """
  Queue Type specifies how the input entities should be ordered at the receiving
  unit.
  """
  queueType: Function_InputsQueueType

}
enum Function_InputsQueueType {
  FIFO
  LIFO
  Priority
  Reverse_Priority
}
type Function_MaEnablesDetectionOfTarget {
  lossScenarioTarget: LossScenarioID
  """
  constraint (=,<,>) for Item, Function, Link, Resource monitored by Sentinel
  """
  constraint: [String]

}
type Function_MaIsRecoveredByTarget {
  resilientModeTarget: ResilientModeID
  """
  A collection of calculated values: "measured" (via system evaluation /
  simulation) resilient mode recovery time divided by "needed" resilient mode
  recovery time per loss scenario.  Recovery time includes: time to detect, time
  to isolate, time to restore (including operator decision times).    <loss
  scenario name>:<ratio>    A value < 1 is acceptable. A value > 1 is unacceptable
  (too long to recover)
  """
  recoveryRatio: [String]

}
type Function_MaManagesTarget {
  lossScenarioTarget: LossScenarioID
  resilientModeTarget: ResilientModeID
  """
  The management action type for the resilient mode.
  """
  actionType: Function_MaManagesActionType

}
enum Function_MaManagesActionType {
  nil
  activate
  deactivate
  selfTest
}
type Function_OutputsTarget {
  itemTarget: ItemID
}
type Function_ParameterUsedInTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings identifies the parameters associated with the uses parameter from
  relationship. The mappings relationship attribute shows how the parameter maps
  to the variable used.
  """
  mappings: [String]

}
type Function_ProducesTarget {
  resourceTarget: ResourceID
  """
  Amount indicates how much of the resource is produced by the processing unit.
  """
  amount: String

}
type Function_ReflectedInTarget {
  functionTarget: FunctionID
}
type Function_ReflectsTarget {
  functionTarget: FunctionID
}
type Function_RelatesToTarget {
  domainSetTarget: DomainSetID
}
type Function_ServicesTarget {
  linkTarget: LinkID
  transitionTarget: TransitionID
}
type Function_SpecifiedByTarget {
  requirementTarget: RequirementID
  """
  The Governs relationship attribute identifies the Parameter attribute that is
  associated in both the Requirement entity and Component entity joined by the
  specified by / specifies relationship.
  """
  governs: String

}
type Function_TriggeredByTarget {
  itemTarget: ItemID
  """
  Queue Type specifies how the triggering entities should queue up at the
  receiving processing unit.
  """
  queueType: Function_TriggeredByQueueType

}
enum Function_TriggeredByQueueType {
  FIFO
  LIFO
  Priority
  Reverse_Priority
}
type Function_UsesTarget {
  definedTermTarget: DefinedTermID
}
type Function_VerifiedByTarget {
  verificationRequirementTarget: VerificationRequirementID
}
# for mutations
input Function_AllocatedToTarget_Input {
  operation: MutationOperation!
  componentTarget: ComponentID_Input
  behaviorType: Function_AllocatedToBehaviorType
}
input Function_BasedOnTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
}
input Function_CapturesTarget_Input {
  operation: MutationOperation!
  resourceTarget: ResourceID_Input
  acquireAvailable: Boolean
  amount: String
}
input Function_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input Function_ConstrainedByTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input Function_ConsumesTarget_Input {
  operation: MutationOperation!
  resourceTarget: ResourceID_Input
  amount: String
  acquireAvailable: Boolean
}
input Function_DecomposedByTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
}
input Function_DecomposesTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
}
input Function_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Function_ElaboratesTarget_Input {
  operation: MutationOperation!
  lossScenarioTarget: LossScenarioID_Input
  useCaseTarget: UseCaseID_Input
  flowType: Function_ElaboratesFlowType
}
input Function_ExitsByTarget_Input {
  operation: MutationOperation!
  exitTarget: ExitID_Input
  selectionProbability: Float
  type: Function_ExitsByType
}
input Function_IncorporatedByTarget_Input {
  operation: MutationOperation!
  stateTarget: StateID_Input
  behaviorType: Function_IncorporatedByBehaviorType
}
input Function_InputsTarget_Input {
  operation: MutationOperation!
  itemTarget: ItemID_Input
  queueType: Function_InputsQueueType
}
input Function_MaEnablesDetectionOfTarget_Input {
  operation: MutationOperation!
  lossScenarioTarget: LossScenarioID_Input
  constraint: [String]
}
input Function_MaIsRecoveredByTarget_Input {
  operation: MutationOperation!
  resilientModeTarget: ResilientModeID_Input
  recoveryRatio: [String]
}
input Function_MaManagesTarget_Input {
  operation: MutationOperation!
  lossScenarioTarget: LossScenarioID_Input
  resilientModeTarget: ResilientModeID_Input
  actionType: Function_MaManagesActionType
}
input Function_OutputsTarget_Input {
  operation: MutationOperation!
  itemTarget: ItemID_Input
}
input Function_ParameterUsedInTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input Function_ProducesTarget_Input {
  operation: MutationOperation!
  resourceTarget: ResourceID_Input
  amount: String
}
input Function_ReflectedInTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
}
input Function_ReflectsTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
}
input Function_RelatesToTarget_Input {
  operation: MutationOperation!
  domainSetTarget: DomainSetID_Input
}
input Function_ServicesTarget_Input {
  operation: MutationOperation!
  linkTarget: LinkID_Input
  transitionTarget: TransitionID_Input
}
input Function_SpecifiedByTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
  governs: String
}
input Function_TriggeredByTarget_Input {
  operation: MutationOperation!
  itemTarget: ItemID_Input
  queueType: Function_TriggeredByQueueType
}
input Function_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
input Function_VerifiedByTarget_Input {
  operation: MutationOperation!
  verificationRequirementTarget: VerificationRequirementID_Input
}
#########################################
# Hazard definition
#########################################
type Hazard {
  identity: HazardID!
  attributes: HazardATTR
  parameters: [Parameter]
  relations: HazardREL
}
# for mutations
input Hazard_Input {
  operation: MutationOperation!
  identity: HazardID_Input!
  attributes: HazardATTR_Input
  parameters: [Parameter_Input]
  relations: HazardREL_Input
}
type HazardID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input HazardID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type HazardATTR {
  """
  Description is the written statement of this entity.
  """
  description: String

}
# for mutations
input HazardATTR_Input {
  description: String
}
type HazardREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [Hazard_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [Hazard_DocumentedByTarget]

  """
  Indicates causality of entity.
  """
  maIsCausedBy: [Hazard_MaIsCausedByTarget]

  """
  A Loss Scenario is protected by a Sentinel.    A Loss, Hazard, Loss Scenario, or
  Attack Vector is protected by a Remediation.
  """
  maIsProtectedBy: [Hazard_MaIsProtectedByTarget]

  """
  Indicates factors leading to entity.
  """
  maLeadsTo: [Hazard_MaLeadsToTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [Hazard_UsesTarget]

}
# for mutations
input HazardREL_Input {
  categorizedBy: [Hazard_CategorizedByTarget_Input]
  documentedBy: [Hazard_DocumentedByTarget_Input]
  maIsCausedBy: [Hazard_MaIsCausedByTarget_Input]
  maIsProtectedBy: [Hazard_MaIsProtectedByTarget_Input]
  maLeadsTo: [Hazard_MaLeadsToTarget_Input]
  uses: [Hazard_UsesTarget_Input]
}
type Hazard_CategorizedByTarget {
  categoryTarget: CategoryID
}
type Hazard_DocumentedByTarget {
  documentTarget: DocumentID
}
type Hazard_MaIsCausedByTarget {
  hazardousActionTarget: HazardousActionID
}
type Hazard_MaIsProtectedByTarget {
  remediationTarget: RemediationID
}
type Hazard_MaLeadsToTarget {
  lossTarget: LossID
}
type Hazard_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input Hazard_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input Hazard_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Hazard_MaIsCausedByTarget_Input {
  operation: MutationOperation!
  hazardousActionTarget: HazardousActionID_Input
}
input Hazard_MaIsProtectedByTarget_Input {
  operation: MutationOperation!
  remediationTarget: RemediationID_Input
}
input Hazard_MaLeadsToTarget_Input {
  operation: MutationOperation!
  lossTarget: LossID_Input
}
input Hazard_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# HazardousAction definition
#########################################
type HazardousAction {
  identity: HazardousActionID!
  attributes: HazardousActionATTR
  parameters: [Parameter]
  relations: HazardousActionREL
}
# for mutations
input HazardousAction_Input {
  operation: MutationOperation!
  identity: HazardousActionID_Input!
  attributes: HazardousActionATTR_Input
  parameters: [Parameter_Input]
  relations: HazardousActionREL_Input
}
type HazardousActionID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input HazardousActionID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type HazardousActionATTR {
  """
  Likert Scale:  1. Unacceptable hazard and highest priority to provide
  resiliency.  2. Avoid hazard as long as resiliency solution does not
  over-complicate operation.  3. Would like to avoid hazard, but solution needs to
  be incremental.  4. Lowest priority, low-cost, simplistic solutions should be
  considered.
  """
  consequence: HazardousActionConsequence

  """
  There are four ways a control action can be hazardous:  1. Not providing the
  control action leads to a hazard.  2. Providing the control action leads to a
  hazard.  3. Providing a potentially safe control action but too early, too late,
  or in the wrong order  4. The control action lasts too long or is stopped too
  soon (for continuous control actions, not discrete ones).
  """
  variationType: HazardousActionVariationType

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum HazardousActionConsequence {
  E_1
  E_2
  E_3
  E_4
}
enum HazardousActionVariationType {
  NotProviding
  Providing
  TooEarlyTooLate
  TooLongTooSoon
}
# for mutations
input HazardousActionATTR_Input {
  consequence: HazardousActionConsequence
  variationType: HazardousActionVariationType
  description: String
}
type HazardousActionREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [HazardousAction_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [HazardousAction_DocumentedByTarget]

  """
  Unsafe control action context (process model).
  """
  maHasProcessModel: [HazardousAction_MaHasProcessModelTarget]

  """
  Indicates causality of entity.
  """
  maIsCausedBy: [HazardousAction_MaIsCausedByTarget]

  """
  Indicates factors leading to entity.
  """
  maLeadsTo: [HazardousAction_MaLeadsToTarget]

  """
  Entity is an analysis variation.
  """
  maVariationOf: [HazardousAction_MaVariationOfTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [HazardousAction_UsesTarget]

}
# for mutations
input HazardousActionREL_Input {
  categorizedBy: [HazardousAction_CategorizedByTarget_Input]
  documentedBy: [HazardousAction_DocumentedByTarget_Input]
  maHasProcessModel: [HazardousAction_MaHasProcessModelTarget_Input]
  maIsCausedBy: [HazardousAction_MaIsCausedByTarget_Input]
  maLeadsTo: [HazardousAction_MaLeadsToTarget_Input]
  maVariationOf: [HazardousAction_MaVariationOfTarget_Input]
  uses: [HazardousAction_UsesTarget_Input]
}
type HazardousAction_CategorizedByTarget {
  categoryTarget: CategoryID
}
type HazardousAction_DocumentedByTarget {
  documentTarget: DocumentID
}
type HazardousAction_MaHasProcessModelTarget {
  contextTarget: ContextID
  """
  The process model attributes and values that define the "context" for the unsafe
  control action.
  """
  processModelAttributes: [String]

}
type HazardousAction_MaIsCausedByTarget {
  lossScenarioTarget: LossScenarioID
}
type HazardousAction_MaLeadsToTarget {
  hazardTarget: HazardID
}
type HazardousAction_MaVariationOfTarget {
  controlActionTarget: ControlActionID
}
type HazardousAction_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input HazardousAction_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input HazardousAction_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input HazardousAction_MaHasProcessModelTarget_Input {
  operation: MutationOperation!
  contextTarget: ContextID_Input
  processModelAttributes: [String]
}
input HazardousAction_MaIsCausedByTarget_Input {
  operation: MutationOperation!
  lossScenarioTarget: LossScenarioID_Input
}
input HazardousAction_MaLeadsToTarget_Input {
  operation: MutationOperation!
  hazardTarget: HazardID_Input
}
input HazardousAction_MaVariationOfTarget_Input {
  operation: MutationOperation!
  controlActionTarget: ControlActionID_Input
}
input HazardousAction_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# HygienePractice definition
#########################################
type HygienePractice {
  identity: HygienePracticeID!
  attributes: HygienePracticeATTR
  parameters: [Parameter]
  relations: HygienePracticeREL
}
# for mutations
input HygienePractice_Input {
  operation: MutationOperation!
  identity: HygienePracticeID_Input!
  attributes: HygienePracticeATTR_Input
  parameters: [Parameter_Input]
  relations: HygienePracticeREL_Input
}
type HygienePracticeID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input HygienePracticeID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type HygienePracticeATTR {
  """
  A justification for not considering the hygiene practice within the system
  scope.
  """
  outOfScopeJustification: String

  """
  Is the hygiene practice to be considered for the system?
  """
  outOfScope: Boolean

  """
  Description is the written statement of this entity.
  """
  description: String

}
# for mutations
input HygienePracticeATTR_Input {
  outOfScopeJustification: String
  outOfScope: Boolean
  description: String
}
type HygienePracticeREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [HygienePractice_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [HygienePractice_DocumentedByTarget]

  """
  A hygiene practice may be implemented as a remediation.
  """
  maImplementedAs: [HygienePractice_MaImplementedAsTarget]

  """
  A hygiene practice is motivated by attack pattern.
  """
  maMotivatedBy: [HygienePractice_MaMotivatedByTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [HygienePractice_UsesTarget]

}
# for mutations
input HygienePracticeREL_Input {
  categorizedBy: [HygienePractice_CategorizedByTarget_Input]
  documentedBy: [HygienePractice_DocumentedByTarget_Input]
  maImplementedAs: [HygienePractice_MaImplementedAsTarget_Input]
  maMotivatedBy: [HygienePractice_MaMotivatedByTarget_Input]
  uses: [HygienePractice_UsesTarget_Input]
}
type HygienePractice_CategorizedByTarget {
  categoryTarget: CategoryID
}
type HygienePractice_DocumentedByTarget {
  documentTarget: DocumentID
}
type HygienePractice_MaImplementedAsTarget {
  remediationTarget: RemediationID
}
type HygienePractice_MaMotivatedByTarget {
  attackPatternTarget: AttackPatternID
}
type HygienePractice_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input HygienePractice_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input HygienePractice_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input HygienePractice_MaImplementedAsTarget_Input {
  operation: MutationOperation!
  remediationTarget: RemediationID_Input
}
input HygienePractice_MaMotivatedByTarget_Input {
  operation: MutationOperation!
  attackPatternTarget: AttackPatternID_Input
}
input HygienePractice_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# Item definition
#########################################
type Item {
  identity: ItemID!
  attributes: ItemATTR
  parameters: [Parameter]
  relations: ItemREL
}
# for mutations
input Item_Input {
  operation: MutationOperation!
  identity: ItemID_Input!
  attributes: ItemATTR_Input
  parameters: [Parameter_Input]
  relations: ItemREL_Input
}
type ItemID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input ItemID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type ItemATTR {
  """
  Range identifies the range of values that the entity can assume.
  """
  range: String

  """
  Units identifies the units of measurement for the value of the entity.
  """
  units: String

  """
  Accuracy identifies how correct the value of the entity must be.
  """
  accuracy: String

  """
  Fields identifies the data fields contained within the item.
  """
  fields: [String]

  """
  Precision identifies the number of significant digits required for the value of
  the entity.
  """
  precision: String

  """
  Doc. PUID is the project unique identifier that is often used in system
  development specifications and documents to identify the same entity in multiple
  documents. This is not to be confused with the database entity unique
  identifier.
  """
  puid: String

  """
  Size indicates the estimated size (in sizeUnits) of this entity.
  """
  size: String

  """
  Size Units indicates the measurement units associated with this entity.
  """
  sizeUnits: String

  """
  Priority is used to identify the order of processing of an entity. High priority
  entities (larger numbers) are processed before low priority entities (smaller
  numbers).
  """
  priority: String

  """
  Type is the physical type of this entity.
  """
  type: ItemType

  """
  Title is the label to be used in formal documentation instead of the entity
  name.
  """
  title: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum ItemType {
  nil
  Analog
  Digital
  Physical
  Mixed
}
# for mutations
input ItemATTR_Input {
  range: String
  units: String
  accuracy: String
  fields: [String]
  precision: String
  puid: String
  size: String
  sizeUnits: String
  priority: String
  type: ItemType
  title: String
  description: String
}
type ItemREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [Item_CategorizedByTarget]

  """
  Mappings identifies the parameters associated with the constrained by
  relationship. The mappings relationship attribute shows how the parameter maps
  to the variable used.
  """
  constrainedBy: [Item_ConstrainedByTarget]

  """
  Decomposed by identifies the children of this entity.
  """
  decomposedBy: [Item_DecomposedByTarget]

  """
  Decomposes identifies the parent of this entity.
  """
  decomposes: [Item_DecomposesTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [Item_DocumentedByTarget]

  """
  Input to identifies the processing unit that transforms this entity.
  """
  inputTo: [Item_InputToTarget]

  """
  The Function / Link / Item enables detection of Loss Scenario.
  """
  maEnablesDetectionOf: [Item_MaEnablesDetectionOfTarget]

  """
  Output from identifies the processing unit that produces this entity.
  """
  outputFrom: [Item_OutputFromTarget]

  """
  An entity’s parameter is being referenced by a ConstraintDefinition.
  """
  parameterUsedIn: [Item_ParameterUsedInTarget]

  """
  Specified by identifies constraint and/or performance requirements that this
  entity must satisfy.
  """
  specifiedBy: [Item_SpecifiedByTarget]

  """
  Transferred by identifies the connection over which this entity is transported.
  """
  transferredBy: [Item_TransferredByTarget]

  """
  Triggers identifies the information units that enable a processing unit to begin
  execution.  A processing unit begins execution when it has received control
  enablement, all of its triggers have arrived, and its necessary resources are
  available.
  """
  triggers: [Item_TriggersTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [Item_UsesTarget]

  """
  Verified by points to the method of requirement proof which specifies the
  verification technique, level, and status.
  """
  verifiedBy: [Item_VerifiedByTarget]

}
# for mutations
input ItemREL_Input {
  categorizedBy: [Item_CategorizedByTarget_Input]
  constrainedBy: [Item_ConstrainedByTarget_Input]
  decomposedBy: [Item_DecomposedByTarget_Input]
  decomposes: [Item_DecomposesTarget_Input]
  documentedBy: [Item_DocumentedByTarget_Input]
  inputTo: [Item_InputToTarget_Input]
  maEnablesDetectionOf: [Item_MaEnablesDetectionOfTarget_Input]
  outputFrom: [Item_OutputFromTarget_Input]
  parameterUsedIn: [Item_ParameterUsedInTarget_Input]
  specifiedBy: [Item_SpecifiedByTarget_Input]
  transferredBy: [Item_TransferredByTarget_Input]
  triggers: [Item_TriggersTarget_Input]
  uses: [Item_UsesTarget_Input]
  verifiedBy: [Item_VerifiedByTarget_Input]
}
type Item_CategorizedByTarget {
  categoryTarget: CategoryID
}
type Item_ConstrainedByTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings show how the parameter maps to the variable used.
  """
  mappings: [String]

}
type Item_DecomposedByTarget {
  itemTarget: ItemID
}
type Item_DecomposesTarget {
  itemTarget: ItemID
}
type Item_DocumentedByTarget {
  documentTarget: DocumentID
}
type Item_InputToTarget {
  functionTarget: FunctionID
  """
  Queue Type specifies how the input entities should be ordered at the receiving
  unit.
  """
  queueType: Item_InputToQueueType

}
enum Item_InputToQueueType {
  FIFO
  LIFO
  Priority
  Reverse_Priority
}
type Item_MaEnablesDetectionOfTarget {
  lossScenarioTarget: LossScenarioID
  """
  constraint (=,<,>) for Item, Function, Link, Resource monitored by Sentinel
  """
  constraint: [String]

}
type Item_OutputFromTarget {
  functionTarget: FunctionID
}
type Item_ParameterUsedInTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings identifies the parameters associated with the uses parameter from
  relationship. The mappings relationship attribute shows how the parameter maps
  to the variable used.
  """
  mappings: [String]

}
type Item_SpecifiedByTarget {
  requirementTarget: RequirementID
  """
  The Governs relationship attribute identifies the Parameter attribute that is
  associated in both the Requirement entity and Component entity joined by the
  specified by / specifies relationship.
  """
  governs: String

}
type Item_TransferredByTarget {
  linkTarget: LinkID
}
type Item_TriggersTarget {
  functionTarget: FunctionID
  """
  Queue Type specifies how the triggering entities should queue up at the
  receiving processing unit.
  """
  queueType: Item_TriggersQueueType

}
enum Item_TriggersQueueType {
  FIFO
  LIFO
  Priority
  Reverse_Priority
}
type Item_UsesTarget {
  definedTermTarget: DefinedTermID
}
type Item_VerifiedByTarget {
  verificationRequirementTarget: VerificationRequirementID
}
# for mutations
input Item_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input Item_ConstrainedByTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input Item_DecomposedByTarget_Input {
  operation: MutationOperation!
  itemTarget: ItemID_Input
}
input Item_DecomposesTarget_Input {
  operation: MutationOperation!
  itemTarget: ItemID_Input
}
input Item_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Item_InputToTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
  queueType: Item_InputToQueueType
}
input Item_MaEnablesDetectionOfTarget_Input {
  operation: MutationOperation!
  lossScenarioTarget: LossScenarioID_Input
  constraint: [String]
}
input Item_OutputFromTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
}
input Item_ParameterUsedInTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input Item_SpecifiedByTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
  governs: String
}
input Item_TransferredByTarget_Input {
  operation: MutationOperation!
  linkTarget: LinkID_Input
}
input Item_TriggersTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
  queueType: Item_TriggersQueueType
}
input Item_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
input Item_VerifiedByTarget_Input {
  operation: MutationOperation!
  verificationRequirementTarget: VerificationRequirementID_Input
}
#########################################
# Link definition
#########################################
type Link {
  identity: LinkID!
  attributes: LinkATTR
  parameters: [Parameter]
  relations: LinkREL
}
# for mutations
input Link_Input {
  operation: MutationOperation!
  identity: LinkID_Input!
  attributes: LinkATTR_Input
  parameters: [Parameter_Input]
  relations: LinkREL_Input
}
type LinkID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input LinkID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type LinkATTR {
  """
  A justification for excluding the Link from the Attack Analysis.
  """
  outOfScopeJustification: String

  """
  Protocol identifies the communication protocol for this entity.
  """
  protocol: String

  """
  Type is the physical category of this entity.
  """
  type: LinkType

  """
  Is the Link out of scope for the system Attack Analysis?
  """
  outOfScopeAttackAnalysis: Boolean

  """
  Delay represents the time delay that occurs when an information unit traverses
  this connecting unit. It is intended to model the actual propagation delay and
  processing delay, not the delay due to resource utilization.
  """
  delay: String

  """
  Capacity indicates the flow capacity (in capacityUnits) of this connecting
  entity.
  """
  capacity: String

  """
  Title is the label to be used in formal documentation instead of the entity
  name.
  """
  title: String

  """
  Doc. PUID is the project unique identifier that is often used in system
  development specifications and documents to identify the same entity in multiple
  documents. This is not to be confused with the database entity unique
  identifier.
  """
  puid: String

  """
  Delay Units identifies the units for the delay for this connecting unit.
  """
  delayUnits: String

  """
  Capacity Units indicates the measurement units associated with this connecting
  entity.
  """
  capacityUnits: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum LinkType {
  nil
  Data
  Fluid
  Electrical
  Human
  Mechanical
  Power
  Structural
  Thermal
}
# for mutations
input LinkATTR_Input {
  outOfScopeJustification: String
  protocol: String
  type: LinkType
  outOfScopeAttackAnalysis: Boolean
  delay: String
  capacity: String
  title: String
  puid: String
  delayUnits: String
  capacityUnits: String
  description: String
}
type LinkREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [Link_CategorizedByTarget]

  """
  Connects to identifies the connection that serves to link this entity to another
  entity.
  """
  connectsTo: [Link_ConnectsToTarget]

  """
  Mappings identifies the parameters associated with the constrained by
  relationship. The mappings relationship attribute shows how the parameter maps
  to the variable used.
  """
  constrainedBy: [Link_ConstrainedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [Link_DocumentedByTarget]

  """
  Forms identifies the test configurations in which this entity is used.
  """
  forms: [Link_FormsTarget]

  """
  Included in identifies the parent of this entity.
  """
  includedIn: [Link_IncludedInTarget]

  """
  Includes identifies the children of this entity.
  """
  includes: [Link_IncludesTarget]

  """
  The Function / Link / Item enables detection of Loss Scenario.
  """
  maEnablesDetectionOf: [Link_MaEnablesDetectionOfTarget]

  """
  Identifies Attack Patterns that may violate an Entity.
  """
  maIsViolatedBy: [Link_MaIsViolatedByTarget]

  """
  An entity’s parameter is being referenced by a ConstraintDefinition.
  """
  parameterUsedIn: [Link_ParameterUsedInTarget]

  """
  Reported by identifies the documentation entity of which the entity is the
  primary subject.
  """
  reportedBy: [Link_ReportedByTarget]

  """
  Serviced by identifies the processing unit that performs the interface function.
  """
  servicedBy: [Link_ServicedByTarget]

  """
  Specified by identifies constraint and/or performance requirements that this
  entity must satisfy.
  """
  specifiedBy: [Link_SpecifiedByTarget]

  """
  Transfers identifies the information that this connecting unit passes between
  implementation units.
  """
  transfers: [Link_TransfersTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [Link_UsesTarget]

  """
  Verified by points to the method of requirement proof which specifies the
  verification technique, level, and status.
  """
  verifiedBy: [Link_VerifiedByTarget]

}
# for mutations
input LinkREL_Input {
  categorizedBy: [Link_CategorizedByTarget_Input]
  connectsTo: [Link_ConnectsToTarget_Input]
  constrainedBy: [Link_ConstrainedByTarget_Input]
  documentedBy: [Link_DocumentedByTarget_Input]
  forms: [Link_FormsTarget_Input]
  includedIn: [Link_IncludedInTarget_Input]
  includes: [Link_IncludesTarget_Input]
  maEnablesDetectionOf: [Link_MaEnablesDetectionOfTarget_Input]
  maIsViolatedBy: [Link_MaIsViolatedByTarget_Input]
  parameterUsedIn: [Link_ParameterUsedInTarget_Input]
  reportedBy: [Link_ReportedByTarget_Input]
  servicedBy: [Link_ServicedByTarget_Input]
  specifiedBy: [Link_SpecifiedByTarget_Input]
  transfers: [Link_TransfersTarget_Input]
  uses: [Link_UsesTarget_Input]
  verifiedBy: [Link_VerifiedByTarget_Input]
}
type Link_CategorizedByTarget {
  categoryTarget: CategoryID
}
type Link_ConnectsToTarget {
  componentTarget: ComponentID
  """
  Port ID provides a unique identification for the port that is used between the
  Link and the Component.
  """
  portID: String

}
type Link_ConstrainedByTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings show how the parameter maps to the variable used.
  """
  mappings: [String]

}
type Link_DocumentedByTarget {
  documentTarget: DocumentID
}
type Link_FormsTarget {
  testConfigurationTarget: TestConfigurationID
}
type Link_IncludedInTarget {
  linkTarget: LinkID
}
type Link_IncludesTarget {
  linkTarget: LinkID
}
type Link_MaEnablesDetectionOfTarget {
  lossScenarioTarget: LossScenarioID
  """
  constraint (=,<,>) for Item, Function, Link, Resource monitored by Sentinel
  """
  constraint: [String]

}
type Link_MaIsViolatedByTarget {
  attackVectorTarget: AttackVectorID
}
type Link_ParameterUsedInTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings identifies the parameters associated with the uses parameter from
  relationship. The mappings relationship attribute shows how the parameter maps
  to the variable used.
  """
  mappings: [String]

}
type Link_ReportedByTarget {
  documentTarget: DocumentID
}
type Link_ServicedByTarget {
  functionTarget: FunctionID
}
type Link_SpecifiedByTarget {
  requirementTarget: RequirementID
  """
  The Governs relationship attribute identifies the Parameter attribute that is
  associated in both the Requirement entity and Component entity joined by the
  specified by / specifies relationship.
  """
  governs: String

}
type Link_TransfersTarget {
  itemTarget: ItemID
}
type Link_UsesTarget {
  definedTermTarget: DefinedTermID
}
type Link_VerifiedByTarget {
  verificationRequirementTarget: VerificationRequirementID
}
# for mutations
input Link_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input Link_ConnectsToTarget_Input {
  operation: MutationOperation!
  componentTarget: ComponentID_Input
  portID: String
}
input Link_ConstrainedByTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input Link_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Link_FormsTarget_Input {
  operation: MutationOperation!
  testConfigurationTarget: TestConfigurationID_Input
}
input Link_IncludedInTarget_Input {
  operation: MutationOperation!
  linkTarget: LinkID_Input
}
input Link_IncludesTarget_Input {
  operation: MutationOperation!
  linkTarget: LinkID_Input
}
input Link_MaEnablesDetectionOfTarget_Input {
  operation: MutationOperation!
  lossScenarioTarget: LossScenarioID_Input
  constraint: [String]
}
input Link_MaIsViolatedByTarget_Input {
  operation: MutationOperation!
  attackVectorTarget: AttackVectorID_Input
}
input Link_ParameterUsedInTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input Link_ReportedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Link_ServicedByTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
}
input Link_SpecifiedByTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
  governs: String
}
input Link_TransfersTarget_Input {
  operation: MutationOperation!
  itemTarget: ItemID_Input
}
input Link_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
input Link_VerifiedByTarget_Input {
  operation: MutationOperation!
  verificationRequirementTarget: VerificationRequirementID_Input
}
#########################################
# Loss definition
#########################################
type Loss {
  identity: LossID!
  attributes: LossATTR
  parameters: [Parameter]
  relations: LossREL
}
# for mutations
input Loss_Input {
  operation: MutationOperation!
  identity: LossID_Input!
  attributes: LossATTR_Input
  parameters: [Parameter_Input]
  relations: LossREL_Input
}
type LossID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input LossID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type LossATTR {
  """
  Likert Scale:  1. Unacceptable loss and highest priority to provide resiliency. 
  2. Avoid loss as long as resiliency solution does not over-complicate operation.
   3. Would like to avoid loss, but solution needs to be incremental.  4. Lowest
  priority, low-cost, simplistic solutions should be considered.
  """
  priority: LossPriority

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum LossPriority {
  E_1
  E_2
  E_3
  E_4
}
# for mutations
input LossATTR_Input {
  priority: LossPriority
  description: String
}
type LossREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [Loss_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [Loss_DocumentedByTarget]

  """
  Indicates causality of entity.
  """
  maIsCausedBy: [Loss_MaIsCausedByTarget]

  """
  A Loss Scenario is protected by a Sentinel.    A Loss, Hazard, Loss Scenario, or
  Attack Vector is protected by a Remediation.
  """
  maIsProtectedBy: [Loss_MaIsProtectedByTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [Loss_UsesTarget]

}
# for mutations
input LossREL_Input {
  categorizedBy: [Loss_CategorizedByTarget_Input]
  documentedBy: [Loss_DocumentedByTarget_Input]
  maIsCausedBy: [Loss_MaIsCausedByTarget_Input]
  maIsProtectedBy: [Loss_MaIsProtectedByTarget_Input]
  uses: [Loss_UsesTarget_Input]
}
type Loss_CategorizedByTarget {
  categoryTarget: CategoryID
}
type Loss_DocumentedByTarget {
  documentTarget: DocumentID
}
type Loss_MaIsCausedByTarget {
  hazardTarget: HazardID
}
type Loss_MaIsProtectedByTarget {
  remediationTarget: RemediationID
}
type Loss_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input Loss_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input Loss_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Loss_MaIsCausedByTarget_Input {
  operation: MutationOperation!
  hazardTarget: HazardID_Input
}
input Loss_MaIsProtectedByTarget_Input {
  operation: MutationOperation!
  remediationTarget: RemediationID_Input
}
input Loss_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# LossScenario definition
#########################################
type LossScenario {
  identity: LossScenarioID!
  attributes: LossScenarioATTR
  parameters: [Parameter]
  relations: LossScenarioREL
}
# for mutations
input LossScenario_Input {
  operation: MutationOperation!
  identity: LossScenarioID_Input!
  attributes: LossScenarioATTR_Input
  parameters: [Parameter_Input]
  relations: LossScenarioREL_Input
}
type LossScenarioID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input LossScenarioID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type LossScenarioATTR {
  """
  Doc. PUID is the project unique identifier that is often used in system
  development specifications and documents to identify the same entity in multiple
  documents. This is not to be confused with the database entity unique
  identifier.
  """
  puid: String

  """
  The category of threat - terminology reused from STRIDE.    Spoofing: Involves
  illegally accessing and then using another user's authentication information,
  such as username and password.    Tampering: Involves the malicious modification
  of data. Examples include unauthorized changes made to persistent data, such as
  that held in a database, and the alteration of data as it flows between two
  computers over an open network, such as the Internet.    Repudiation: Associated
  with users who deny performing an action without other parties having any way to
  prove otherwise—for example, a user performs an illegal operation in a system
  that lacks the ability to trace the prohibited operations. Non-Repudiation
  refers to the ability of a system to counter repudiation threats. For example, a
  user who purchases an item might have to sign for the item upon receipt. The
  vendor can then use the signed receipt as evidence that the user did receive the
  package.    Information Disclosure: Involves the exposure of information to
  individuals who are not supposed to have access to it—for example, the ability
  of users to read a file that they were not granted access to, or the ability of
  an intruder to read data in transit between two computers.    Denial of Service:
  Denial of service (DoS) attacks deny service to valid users—for example, by
  making a Web server temporarily unavailable or unusable. You must protect
  against certain types of DoS threats simply to improve system availability and
  reliability.    Elevation of Privilege: An unprivileged user gains privileged
  access and thereby has sufficient access to compromise or destroy the entire
  system. Elevation of privilege threats include those situations in which an
  attacker has effectively penetrated all system defenses and become part of the
  trusted system itself, a dangerous situation indeed.
  """
  threat_category: LossScenarioThreat_category

  """
  The Sentinel design pattern associated with the Loss Scenario.
  """
  detect_pattern: LossScenarioDetect_pattern

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum LossScenarioThreat_category {
  nil
  Spoofing
  Tampering
  Repudiation
  Information_Disclosure
  Denial_of_Service
  Elevation_of_Privilege
}
enum LossScenarioDetect_pattern {
  Changing_Control_Input
  Data_Consistency
  Introspection
  Measured_Boot
  Other
}
# for mutations
input LossScenarioATTR_Input {
  puid: String
  threat_category: LossScenarioThreat_category
  detect_pattern: LossScenarioDetect_pattern
  description: String
}
type LossScenarioREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [LossScenario_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [LossScenario_DocumentedByTarget]

  """
  Elaborated by identifies the processing unit that provides the detailed
  behavioral model of the use case.
  """
  elaboratedBy: [LossScenario_ElaboratedByTarget]

  """
  A Use Case, Hazard, Unsafe Action enables the elicitation of requirements from
  stakeholders.
  """
  elicits: [LossScenario_ElicitsTarget]

  """
  The Loss Scenario is detected by monitoring:  Item – Control Action / Feedback /
  Context​  "Field" value tampered​  size tampered​  order modified  Function 
  Input / Trigger – injected / spoofed​  Output – incorrect value  Exit (Error
  logic)​  Resource (too much / too little)​  Attribute: Duration (too long / too
  short)  Attribute: Timeout (too long / too short)  Link  Attribute: Capacity
  (too much / too little)​  Attribute: Delay (too long / too short)
  """
  maDetectedByMonitoring: [LossScenario_MaDetectedByMonitoringTarget]

  """
  A Loss Scenario is protected by a Sentinel.    A Loss, Hazard, Loss Scenario, or
  Attack Vector is protected by a Remediation.
  """
  maIsProtectedBy: [LossScenario_MaIsProtectedByTarget]

  """
  Indicates factors leading to entity.
  """
  maLeadsTo: [LossScenario_MaLeadsToTarget]

  """
  The resilient mode is managed (enabled / disabled / tested) by control action.
  """
  maManagedBy: [LossScenario_MaManagedByTarget]

  """
  The loss scenarios reconfigures using resilient mode.
  """
  maReconfiguresUsing: [LossScenario_MaReconfiguresUsingTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [LossScenario_UsesTarget]

  """
  Verified by points to the method of requirement proof which specifies the
  verification technique, level, and status.
  """
  verifiedBy: [LossScenario_VerifiedByTarget]

}
# for mutations
input LossScenarioREL_Input {
  categorizedBy: [LossScenario_CategorizedByTarget_Input]
  documentedBy: [LossScenario_DocumentedByTarget_Input]
  elaboratedBy: [LossScenario_ElaboratedByTarget_Input]
  elicits: [LossScenario_ElicitsTarget_Input]
  maDetectedByMonitoring: [LossScenario_MaDetectedByMonitoringTarget_Input]
  maIsProtectedBy: [LossScenario_MaIsProtectedByTarget_Input]
  maLeadsTo: [LossScenario_MaLeadsToTarget_Input]
  maManagedBy: [LossScenario_MaManagedByTarget_Input]
  maReconfiguresUsing: [LossScenario_MaReconfiguresUsingTarget_Input]
  uses: [LossScenario_UsesTarget_Input]
  verifiedBy: [LossScenario_VerifiedByTarget_Input]
}
type LossScenario_CategorizedByTarget {
  categoryTarget: CategoryID
}
type LossScenario_DocumentedByTarget {
  documentTarget: DocumentID
}
type LossScenario_ElaboratedByTarget {
  functionTarget: FunctionID
  """
  Flow type indicates if this elaboration represents the primary flow or alternate
  flow.
  """
  flowType: LossScenario_ElaboratedByFlowType

}
enum LossScenario_ElaboratedByFlowType {
  Alternate
  Primary
}
type LossScenario_ElicitsTarget {
  requirementTarget: RequirementID
}
type LossScenario_MaDetectedByMonitoringTarget {
  resourceTarget: ResourceID
  itemTarget: ItemID
  linkTarget: LinkID
  componentTarget: ComponentID
  functionTarget: FunctionID
  """
  constraint (=,<,>) for Item, Function, Link, Resource monitored by Sentinel
  """
  constraint: [String]

}
type LossScenario_MaIsProtectedByTarget {
  componentTarget: ComponentID
  remediationTarget: RemediationID
}
type LossScenario_MaLeadsToTarget {
  hazardousActionTarget: HazardousActionID
}
type LossScenario_MaManagedByTarget {
  functionTarget: FunctionID
  """
  The management action type for the resilient mode.
  """
  actionType: LossScenario_MaManagedByActionType

}
enum LossScenario_MaManagedByActionType {
  nil
  activate
  deactivate
  selfTest
}
type LossScenario_MaReconfiguresUsingTarget {
  resilientModeTarget: ResilientModeID
}
type LossScenario_UsesTarget {
  definedTermTarget: DefinedTermID
}
type LossScenario_VerifiedByTarget {
  verificationRequirementTarget: VerificationRequirementID
}
# for mutations
input LossScenario_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input LossScenario_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input LossScenario_ElaboratedByTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
  flowType: LossScenario_ElaboratedByFlowType
}
input LossScenario_ElicitsTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
}
input LossScenario_MaDetectedByMonitoringTarget_Input {
  operation: MutationOperation!
  resourceTarget: ResourceID_Input
  itemTarget: ItemID_Input
  linkTarget: LinkID_Input
  componentTarget: ComponentID_Input
  functionTarget: FunctionID_Input
  constraint: [String]
}
input LossScenario_MaIsProtectedByTarget_Input {
  operation: MutationOperation!
  componentTarget: ComponentID_Input
  remediationTarget: RemediationID_Input
}
input LossScenario_MaLeadsToTarget_Input {
  operation: MutationOperation!
  hazardousActionTarget: HazardousActionID_Input
}
input LossScenario_MaManagedByTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
  actionType: LossScenario_MaManagedByActionType
}
input LossScenario_MaReconfiguresUsingTarget_Input {
  operation: MutationOperation!
  resilientModeTarget: ResilientModeID_Input
}
input LossScenario_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
input LossScenario_VerifiedByTarget_Input {
  operation: MutationOperation!
  verificationRequirementTarget: VerificationRequirementID_Input
}
#########################################
# Remediation definition
#########################################
type Remediation {
  identity: RemediationID!
  attributes: RemediationATTR
  parameters: [Parameter]
  relations: RemediationREL
}
# for mutations
input Remediation_Input {
  operation: MutationOperation!
  identity: RemediationID_Input!
  attributes: RemediationATTR_Input
  parameters: [Parameter_Input]
  relations: RemediationREL_Input
}
type RemediationID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input RemediationID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type RemediationATTR {
  """
  The type of remediation including Cyber Hygiene (CH) and Resilience (RES)
  mechanisms.
  """
  type: RemediationType

  """
  A justification for the remediation.
  """
  justification: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum RemediationType {
  nil
  CH_Inventory
  CH_Protection
  CH_Configuration_Management
  CH_Recovery
  CH_Monitoring
  CH_Malware_Detection
  CH_Education
  RES_Harden
  RES_Defense
  RES_Diverse_Redundancy
}
# for mutations
input RemediationATTR_Input {
  type: RemediationType
  justification: String
  description: String
}
type RemediationREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [Remediation_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [Remediation_DocumentedByTarget]

  """
  A Use Case, Hazard, Unsafe Action enables the elicitation of requirements from
  stakeholders.
  """
  elicits: [Remediation_ElicitsTarget]

  """
  A remediation may be an implementation of a hygiene practice.
  """
  maIsImplementationOf: [Remediation_MaIsImplementationOfTarget]

  """
  A Sentinel protects against one or more Loss Scenarios.    A Remediation
  protects against a Loss, Hazard, Loss Scenario, or Attack Vector.
  """
  maProtectsAgainst: [Remediation_MaProtectsAgainstTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [Remediation_UsesTarget]

}
# for mutations
input RemediationREL_Input {
  categorizedBy: [Remediation_CategorizedByTarget_Input]
  documentedBy: [Remediation_DocumentedByTarget_Input]
  elicits: [Remediation_ElicitsTarget_Input]
  maIsImplementationOf: [Remediation_MaIsImplementationOfTarget_Input]
  maProtectsAgainst: [Remediation_MaProtectsAgainstTarget_Input]
  uses: [Remediation_UsesTarget_Input]
}
type Remediation_CategorizedByTarget {
  categoryTarget: CategoryID
}
type Remediation_DocumentedByTarget {
  documentTarget: DocumentID
}
type Remediation_ElicitsTarget {
  requirementTarget: RequirementID
}
type Remediation_MaIsImplementationOfTarget {
  hygienePracticeTarget: HygienePracticeID
}
type Remediation_MaProtectsAgainstTarget {
  lossScenarioTarget: LossScenarioID
  hazardTarget: HazardID
  attackVectorTarget: AttackVectorID
  lossTarget: LossID
}
type Remediation_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input Remediation_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input Remediation_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Remediation_ElicitsTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
}
input Remediation_MaIsImplementationOfTarget_Input {
  operation: MutationOperation!
  hygienePracticeTarget: HygienePracticeID_Input
}
input Remediation_MaProtectsAgainstTarget_Input {
  operation: MutationOperation!
  lossScenarioTarget: LossScenarioID_Input
  hazardTarget: HazardID_Input
  attackVectorTarget: AttackVectorID_Input
  lossTarget: LossID_Input
}
input Remediation_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# Requirement definition
#########################################
type Requirement {
  identity: RequirementID!
  attributes: RequirementATTR
  parameters: [Parameter]
  relations: RequirementREL
}
# for mutations
input Requirement_Input {
  operation: MutationOperation!
  identity: RequirementID_Input!
  attributes: RequirementATTR_Input
  parameters: [Parameter_Input]
  relations: RequirementREL_Input
}
type RequirementID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input RequirementID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type RequirementATTR {
  """
  Weight Factor indicates the relative importance of a particular originating
  requirement.
  """
  weightFactor: Float

  """
  Title is the label to be used in formal documentation instead of the element
  name.
  """
  title: String

  """
  Type is the nature of the requirement. A requirement of type Capability ought to
  be the only the basis of an OperationalActivity.
  """
  type: RequirementType

  """
  Rationale documents the reason for the requirement.
  """
  rationale: String

  """
  Incentive Performance Parameter identifies whether or not this is a requirement
  affecting contract award fee.
  """
  incentivePerformanceParameter: Boolean

  """
  Key Performance Parameter identifies whether or not this is a key performance
  parameter.
  """
  keyPerformanceParameter: Boolean

  """
  Value of the constraint or performance measure.
  """
  value: String

  """
  Paragraph Number is the number of the source paragraph from which this
  originating requirement was extracted.
  """
  paragraphNumber: String

  """
  Paragraph Title is the title of the source paragraph from which this originating
  requirement was extracted.
  """
  paragraphTitle: String

  """
  Doc. PUID is the project unique identifier that is often used in system
  development specifications and documents to identify the same entity in multiple
  documents. This is not to be confused with the database entity unique
  identifier.
  """
  puid: String

  """
  Origin differentiates between originating requirements, derived requirements,
  and design decisions.
  """
  origin: RequirementOrigin

  """
  A Key Performance Parameter (KPP) is a system metric that is considered critical
  or essential to the development of an effective capability. KPPs are generally
  controlled by the customer or stakeholder. Failure to meet the KPP can be cause
  for a concept or system to be reevaluated as not meeting stakeholder minimum
  requirements.    A Key System Attribute (KSA) is an attribute or characteristic
  considered most critical or essential in meeting a specific capability but is
  not selected as a KPP. KSAs provide an additional level of prioritization below
  KPP but with lower level control than the stakeholder level.    A Measure of
  Operational Effectiveness (MOE) is an operational measure of success for an
  architecture or system which is closely related to the achievement of the
  mission or operational objective being evaluated in the intended operational
  environment under a specified set of conditions. MOEs address the question of
  how well the solution achieves the intended purpose.    A Measure of Performance
  Effectiveness (MOP) is a measure that characterizes physical or functional
  attributes related to a specific solution or system operation, as measured under
  specified testing and/or operational conditions.
  """
  performanceParameterType: RequirementPerformanceParameterType

  """
  Units of the constraining condition or performance measure.
  """
  units: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum RequirementType {
  nil
  Composite
  Constraint
  Functional
  Incentive_Award_Fee_Criterion
  Performance
  Programmatic
  Test
  Verification
}
enum RequirementOrigin {
  nil
  Derived
  Design_Decision
  Originating
}
enum RequirementPerformanceParameterType {
  nil
  KPP
  KSA
  MOE
  MOP
}
# for mutations
input RequirementATTR_Input {
  weightFactor: Float
  title: String
  type: RequirementType
  rationale: String
  incentivePerformanceParameter: Boolean
  keyPerformanceParameter: Boolean
  value: String
  paragraphNumber: String
  paragraphTitle: String
  puid: String
  origin: RequirementOrigin
  performanceParameterType: RequirementPerformanceParameterType
  units: String
  description: String
}
type RequirementREL {
  """
  Basis of identifies the entities that fulfill one or more needs.
  """
  basisOf: [Requirement_BasisOfTarget]

  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [Requirement_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [Requirement_DocumentedByTarget]

  """
  A requirement may be elicited by a Use Case, Hazard, Unsafe Action.
  """
  elicitedBy: [Requirement_ElicitedByTarget]

  """
  Establishes identifies the entities needed to fulfill one or more test objective
  requirements.
  """
  establishes: [Requirement_EstablishesTarget]

  """
  Refined by identifies the children of this entity.
  """
  refinedBy: [Requirement_RefinedByTarget]

  """
  Refines identifies the parent of this entity.
  """
  refines: [Requirement_RefinesTarget]

  """
  Specifies identifies those entities whose performance or whose characteristics
  are bounded by the requirement.
  """
  specifies: [Requirement_SpecifiesTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [Requirement_UsesTarget]

  """
  Verified by points to the method of requirement proof which specifies the
  verification technique, level, and status.
  """
  verifiedBy: [Requirement_VerifiedByTarget]

}
# for mutations
input RequirementREL_Input {
  basisOf: [Requirement_BasisOfTarget_Input]
  categorizedBy: [Requirement_CategorizedByTarget_Input]
  documentedBy: [Requirement_DocumentedByTarget_Input]
  elicitedBy: [Requirement_ElicitedByTarget_Input]
  establishes: [Requirement_EstablishesTarget_Input]
  refinedBy: [Requirement_RefinedByTarget_Input]
  refines: [Requirement_RefinesTarget_Input]
  specifies: [Requirement_SpecifiesTarget_Input]
  uses: [Requirement_UsesTarget_Input]
  verifiedBy: [Requirement_VerifiedByTarget_Input]
}
type Requirement_BasisOfTarget {
  functionTarget: FunctionID
  verificationRequirementTarget: VerificationRequirementID
  useCaseTarget: UseCaseID
  testActivityTarget: TestActivityID
}
type Requirement_CategorizedByTarget {
  categoryTarget: CategoryID
}
type Requirement_DocumentedByTarget {
  documentTarget: DocumentID
}
type Requirement_ElicitedByTarget {
  lossScenarioTarget: LossScenarioID
  useCaseTarget: UseCaseID
  remediationTarget: RemediationID
}
type Requirement_EstablishesTarget {
  testActivityTarget: TestActivityID
}
type Requirement_RefinedByTarget {
  requirementTarget: RequirementID
}
type Requirement_RefinesTarget {
  requirementTarget: RequirementID
}
type Requirement_SpecifiesTarget {
  itemTarget: ItemID
  functionTarget: FunctionID
  stateTarget: StateID
  verificationEventTarget: VerificationEventID
  """
  The Governs relationship attribute identifies the Parameter attribute that is
  associated in both the Requirement entity and Component entity joined by the
  specified by / specifies relationship.
  """
  governs: String

}
type Requirement_UsesTarget {
  definedTermTarget: DefinedTermID
}
type Requirement_VerifiedByTarget {
  verificationRequirementTarget: VerificationRequirementID
}
# for mutations
input Requirement_BasisOfTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
  verificationRequirementTarget: VerificationRequirementID_Input
  useCaseTarget: UseCaseID_Input
  testActivityTarget: TestActivityID_Input
}
input Requirement_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input Requirement_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Requirement_ElicitedByTarget_Input {
  operation: MutationOperation!
  lossScenarioTarget: LossScenarioID_Input
  useCaseTarget: UseCaseID_Input
  remediationTarget: RemediationID_Input
}
input Requirement_EstablishesTarget_Input {
  operation: MutationOperation!
  testActivityTarget: TestActivityID_Input
}
input Requirement_RefinedByTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
}
input Requirement_RefinesTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
}
input Requirement_SpecifiesTarget_Input {
  operation: MutationOperation!
  itemTarget: ItemID_Input
  functionTarget: FunctionID_Input
  stateTarget: StateID_Input
  verificationEventTarget: VerificationEventID_Input
  governs: String
}
input Requirement_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
input Requirement_VerifiedByTarget_Input {
  operation: MutationOperation!
  verificationRequirementTarget: VerificationRequirementID_Input
}
#########################################
# ResilientMode definition
#########################################
type ResilientMode {
  identity: ResilientModeID!
  attributes: ResilientModeATTR
  parameters: [Parameter]
  relations: ResilientModeREL
}
# for mutations
input ResilientMode_Input {
  operation: MutationOperation!
  identity: ResilientModeID_Input!
  attributes: ResilientModeATTR_Input
  parameters: [Parameter_Input]
  relations: ResilientModeREL_Input
}
type ResilientModeID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input ResilientModeID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type ResilientModeATTR {
  """
  STRAT: "Effectiveness" of resilient mode calculated by impact on remediating
  high "likelihood", attacks (Loss Scenario) associated with high "mission impact"
  Losses.
  """
  effectiveness: ResilientModeEffectiveness

  """
  Degree of model "contained by" associations.​
  """
  complexity: ResilientModeComplexity

  """
  Title is the label to be used in formal documentation instead of the entity
  name.
  """
  title: String

  """
  Doc. PUID is the project unique identifier that is often used in system
  development specifications and documents to identify the same entity in multiple
  documents. This is not to be confused with the database entity unique
  identifier.
  """
  puid: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum ResilientModeEffectiveness {
  nil
  High
  Medium
  Low
}
enum ResilientModeComplexity {
  nil
  High
  Med
  Low
}
# for mutations
input ResilientModeATTR_Input {
  effectiveness: ResilientModeEffectiveness
  complexity: ResilientModeComplexity
  title: String
  puid: String
  description: String
}
type ResilientModeREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [ResilientMode_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [ResilientMode_DocumentedByTarget]

  """
  The source entity envelopes or includes the destination entity in some sense.
  """
  encompasses: [ResilientMode_EncompassesTarget]

  """
  Forms identifies the test configurations in which this entity is used.
  """
  forms: [ResilientMode_FormsTarget]

  """
  The resilient mode is managed (enabled / disabled / tested) by control action.
  """
  maManagedBy: [ResilientMode_MaManagedByTarget]

  """
  The resilient mode, in some way, provides an alternate operation for the
  component.
  """
  maProvidesAlternateOperationFor: [ResilientMode_MaProvidesAlternateOperationForTarget]

  """
  The resilient mode provides reconfiguration for loss scenarios.
  """
  maProvidesReconfigurationFor: [ResilientMode_MaProvidesReconfigurationForTarget]

  """
  A ResilentMode recovers a failed / cyber attacked "system" Function.
  """
  maRecovers: [ResilientMode_MaRecoversTarget]

  """
  Specified by identifies constraint and/or performance requirements that this
  entity must satisfy.
  """
  specifiedBy: [ResilientMode_SpecifiedByTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [ResilientMode_UsesTarget]

}
# for mutations
input ResilientModeREL_Input {
  categorizedBy: [ResilientMode_CategorizedByTarget_Input]
  documentedBy: [ResilientMode_DocumentedByTarget_Input]
  encompasses: [ResilientMode_EncompassesTarget_Input]
  forms: [ResilientMode_FormsTarget_Input]
  maManagedBy: [ResilientMode_MaManagedByTarget_Input]
  maProvidesAlternateOperationFor: [ResilientMode_MaProvidesAlternateOperationForTarget_Input]
  maProvidesReconfigurationFor: [ResilientMode_MaProvidesReconfigurationForTarget_Input]
  maRecovers: [ResilientMode_MaRecoversTarget_Input]
  specifiedBy: [ResilientMode_SpecifiedByTarget_Input]
  uses: [ResilientMode_UsesTarget_Input]
}
type ResilientMode_CategorizedByTarget {
  categoryTarget: CategoryID
}
type ResilientMode_DocumentedByTarget {
  documentTarget: DocumentID
}
type ResilientMode_EncompassesTarget {
  stateTarget: StateID
}
type ResilientMode_FormsTarget {
  testConfigurationTarget: TestConfigurationID
}
type ResilientMode_MaManagedByTarget {
  controlActionTarget: ControlActionID
  functionTarget: FunctionID
  """
  The management action type for the resilient mode.
  """
  actionType: ResilientMode_MaManagedByActionType

}
enum ResilientMode_MaManagedByActionType {
  nil
  activate
  deactivate
  selfTest
}
type ResilientMode_MaProvidesAlternateOperationForTarget {
  componentTarget: ComponentID
}
type ResilientMode_MaProvidesReconfigurationForTarget {
  lossScenarioTarget: LossScenarioID
}
type ResilientMode_MaRecoversTarget {
  functionTarget: FunctionID
  """
  A collection of calculated values: "measured" (via system evaluation /
  simulation) resilient mode recovery time divided by "needed" resilient mode
  recovery time per loss scenario.  Recovery time includes: time to detect, time
  to isolate, time to restore (including operator decision times).    <loss
  scenario name>:<ratio>    A value < 1 is acceptable. A value > 1 is unacceptable
  (too long to recover)
  """
  recoveryRatio: [String]

}
type ResilientMode_SpecifiedByTarget {
  requirementTarget: RequirementID
  """
  The Governs relationship attribute identifies the Parameter attribute that is
  associated in both the Requirement entity and Component entity joined by the
  specified by / specifies relationship.
  """
  governs: String

}
type ResilientMode_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input ResilientMode_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input ResilientMode_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input ResilientMode_EncompassesTarget_Input {
  operation: MutationOperation!
  stateTarget: StateID_Input
}
input ResilientMode_FormsTarget_Input {
  operation: MutationOperation!
  testConfigurationTarget: TestConfigurationID_Input
}
input ResilientMode_MaManagedByTarget_Input {
  operation: MutationOperation!
  controlActionTarget: ControlActionID_Input
  functionTarget: FunctionID_Input
  actionType: ResilientMode_MaManagedByActionType
}
input ResilientMode_MaProvidesAlternateOperationForTarget_Input {
  operation: MutationOperation!
  componentTarget: ComponentID_Input
}
input ResilientMode_MaProvidesReconfigurationForTarget_Input {
  operation: MutationOperation!
  lossScenarioTarget: LossScenarioID_Input
}
input ResilientMode_MaRecoversTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
  recoveryRatio: [String]
}
input ResilientMode_SpecifiedByTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
  governs: String
}
input ResilientMode_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# Resource definition
#########################################
type Resource {
  identity: ResourceID!
  attributes: ResourceATTR
  parameters: [Parameter]
  relations: ResourceREL
}
# for mutations
input Resource_Input {
  operation: MutationOperation!
  identity: ResourceID_Input!
  attributes: ResourceATTR_Input
  parameters: [Parameter_Input]
  relations: ResourceREL_Input
}
type ResourceID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input ResourceID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type ResourceATTR {
  """
  Maximum Amount is the largest amount of the resource that can be present in the
  system at any time. This value is used in dynamically analyzing the behavior of
  the system.
  """
  maximumAmount: String

  """
  Amount Type indicates whether this resource exists in integer or float amounts.
  """
  amountType: ResourceAmountType

  """
  Units indicates the units of measure for the resource.
  """
  units: String

  """
  Initial Amount is the amount of the resource present in the system when the
  system starts. This value is used in dynamically analyzing the behavior of the
  system.
  """
  initialAmount: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum ResourceAmountType {
  Float
  Integer
}
# for mutations
input ResourceATTR_Input {
  maximumAmount: String
  amountType: ResourceAmountType
  units: String
  initialAmount: String
  description: String
}
type ResourceREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [Resource_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [Resource_DocumentedByTarget]

  """
  The Function / Link / Item enables detection of Loss Scenario.
  """
  maEnablesDetectionOf: [Resource_MaEnablesDetectionOfTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [Resource_UsesTarget]

}
# for mutations
input ResourceREL_Input {
  categorizedBy: [Resource_CategorizedByTarget_Input]
  documentedBy: [Resource_DocumentedByTarget_Input]
  maEnablesDetectionOf: [Resource_MaEnablesDetectionOfTarget_Input]
  uses: [Resource_UsesTarget_Input]
}
type Resource_CategorizedByTarget {
  categoryTarget: CategoryID
}
type Resource_DocumentedByTarget {
  documentTarget: DocumentID
}
type Resource_MaEnablesDetectionOfTarget {
  lossScenarioTarget: LossScenarioID
  """
  constraint (=,<,>) for Item, Function, Link, Resource monitored by Sentinel
  """
  constraint: [String]

}
type Resource_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input Resource_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input Resource_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Resource_MaEnablesDetectionOfTarget_Input {
  operation: MutationOperation!
  lossScenarioTarget: LossScenarioID_Input
  constraint: [String]
}
input Resource_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# State definition
#########################################
type State {
  identity: StateID!
  attributes: StateATTR
  parameters: [Parameter]
  relations: StateREL
}
# for mutations
input State_Input {
  operation: MutationOperation!
  identity: StateID_Input!
  attributes: StateATTR_Input
  parameters: [Parameter_Input]
  relations: StateREL_Input
}
type StateID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input StateID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type StateATTR {
  """
  Doc. PUID is the project unique identifier that is often used in system
  development specifications and documents to identify the same entity in multiple
  documents. This is not to be confused with the database entity unique
  identifier.
  """
  puid: String

  """
  Title to be used in formal documentation instead of the entity name.
  """
  title: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
# for mutations
input StateATTR_Input {
  puid: String
  title: String
  description: String
}
type StateREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [State_CategorizedByTarget]

  """
  Decomposed by identifies the children of this entity.
  """
  decomposedBy: [State_DecomposedByTarget]

  """
  Decomposes identifies the parent of this entity.
  """
  decomposes: [State_DecomposesTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [State_DocumentedByTarget]

  """
  Entered by represents the source entity enabling the destination entity. In
  other words, it relates what caused the source entity to become active.
  """
  enteredBy: [State_EnteredByTarget]

  """
  Exited by represents the entity by which the entity is departed.
  """
  exitedBy: [State_ExitedByTarget]

  """
  Incorporates identifies the destination entity as contained within the source
  entity.
  """
  incorporates: [State_IncorporatesTarget]

  """
  Specified by identifies constraint and/or performance requirements that this
  entity must satisfy.
  """
  specifiedBy: [State_SpecifiedByTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [State_UsesTarget]

}
# for mutations
input StateREL_Input {
  categorizedBy: [State_CategorizedByTarget_Input]
  decomposedBy: [State_DecomposedByTarget_Input]
  decomposes: [State_DecomposesTarget_Input]
  documentedBy: [State_DocumentedByTarget_Input]
  enteredBy: [State_EnteredByTarget_Input]
  exitedBy: [State_ExitedByTarget_Input]
  incorporates: [State_IncorporatesTarget_Input]
  specifiedBy: [State_SpecifiedByTarget_Input]
  uses: [State_UsesTarget_Input]
}
type State_CategorizedByTarget {
  categoryTarget: CategoryID
}
type State_DecomposedByTarget {
  stateTarget: StateID
}
type State_DecomposesTarget {
  stateTarget: StateID
}
type State_DocumentedByTarget {
  documentTarget: DocumentID
}
type State_EnteredByTarget {
  transitionTarget: TransitionID
}
type State_ExitedByTarget {
  transitionTarget: TransitionID
}
type State_IncorporatesTarget {
  functionTarget: FunctionID
  """
  Behavior Type classifies the mapping between the source and destination
  entities.
  """
  behaviorType: State_IncorporatesBehaviorType

}
enum State_IncorporatesBehaviorType {
  Atomic
  Integrated_Root
  Entry
  Exit
}
type State_SpecifiedByTarget {
  requirementTarget: RequirementID
  """
  The Governs relationship attribute identifies the Parameter attribute that is
  associated in both the Requirement entity and Component entity joined by the
  specified by / specifies relationship.
  """
  governs: String

}
type State_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input State_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input State_DecomposedByTarget_Input {
  operation: MutationOperation!
  stateTarget: StateID_Input
}
input State_DecomposesTarget_Input {
  operation: MutationOperation!
  stateTarget: StateID_Input
}
input State_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input State_EnteredByTarget_Input {
  operation: MutationOperation!
  transitionTarget: TransitionID_Input
}
input State_ExitedByTarget_Input {
  operation: MutationOperation!
  transitionTarget: TransitionID_Input
}
input State_IncorporatesTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
  behaviorType: State_IncorporatesBehaviorType
}
input State_SpecifiedByTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
  governs: String
}
input State_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# TestActivity definition
#########################################
type TestActivity {
  identity: TestActivityID!
  attributes: TestActivityATTR
  parameters: [Parameter]
  relations: TestActivityREL
}
# for mutations
input TestActivity_Input {
  operation: MutationOperation!
  identity: TestActivityID_Input!
  attributes: TestActivityATTR_Input
  parameters: [Parameter_Input]
  relations: TestActivityREL_Input
}
type TestActivityID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input TestActivityID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type TestActivityATTR {
  """
  End Date identifies the end date of the entity.
  """
  endDate: String

  """
  Start Date identifies the start date of the entity.
  """
  startDate: String

  """
  Type distinguishes between formal (sponsor) and informal (contractor) testing.
  """
  type: TestActivityType

  """
  Describes any unique constraints of the test activity.
  """
  specialComments: String

  """
  Test Completion Criteria defines completion criteria for a test activity; what
  constitutes test success.
  """
  completionCriteria: String

  """
  Describes the entrance criteria for the test activity.
  """
  prerequisite: String

  """
  Duration is the time that this processing unit takes to complete.
  """
  duration: String

  """
  Execute Decomposition designates whether or not the decomposition of the entity
  should be included when performing a dynamic analysis.
  """
  executeDecomposition: Boolean

  """
  Log Message defines text to be placed in the simulation transcript upon
  execution of the unit.
  """
  logMessage: String

  """
  Timeout is a duration. If it is set, a processing unit that has been enabled but
  not started for that duration should terminate.
  """
  timeout: String

  """
  Title is the label to be used in formal documentation instead of the entity
  name.
  """
  title: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum TestActivityType {
  Contractor
  nil
  Sponsor
}
# for mutations
input TestActivityATTR_Input {
  endDate: String
  startDate: String
  type: TestActivityType
  specialComments: String
  completionCriteria: String
  prerequisite: String
  duration: String
  executeDecomposition: Boolean
  logMessage: String
  timeout: String
  title: String
  description: String
}
type TestActivityREL {
  """
  Accomplishes identifies the activities that are performed to achieve the
  ProgramElement.
  """
  accomplishes: [TestActivity_AccomplishesTarget]

  """
  Based on identifies the needs that this entity fulfills in whole or in part.
  """
  basedOn: [TestActivity_BasedOnTarget]

  """
  Captures identifies resources that this object requires (but does not destroy)
  during execution. Resources are captured when the execution of the processing
  unit begins and released when it completes execution.
  """
  captures: [TestActivity_CapturesTarget]

  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [TestActivity_CategorizedByTarget]

  """
  Mappings identifies the parameters associated with the constrained by
  relationship. The mappings relationship attribute shows how the parameter maps
  to the variable used.
  """
  constrainedBy: [TestActivity_ConstrainedByTarget]

  """
  Consumes identifies resources which this object requires (and destroys) during
  execution. Resources are consumed when the execution of the processing unit
  begins.
  """
  consumes: [TestActivity_ConsumesTarget]

  """
  Decomposed by identifies the children of this entity.
  """
  decomposedBy: [TestActivity_DecomposedByTarget]

  """
  Decomposes identifies the parent of this entity.
  """
  decomposes: [TestActivity_DecomposesTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [TestActivity_DocumentedByTarget]

  """
  Elaborates identifies the use case for which this entity provides the detailed
  behavioral model.
  """
  elaborates: [TestActivity_ElaboratesTarget]

  """
  Employs identifies the entities needed to perform the test activity.
  """
  employs: [TestActivity_EmploysTarget]

  """
  Established by identifies the test objective requirements satisfied by a test.
  """
  establishedBy: [TestActivity_EstablishedByTarget]

  """
  Exits by identifies the set of mutually exclusive exits for this entity.
  """
  exitsBy: [TestActivity_ExitsByTarget]

  """
  Inputs identifies the entities that are transformed by this processing unit.
  """
  inputs: [TestActivity_InputsTarget]

  """
  Outputs identifies the products of the transformation carried out by this
  processing unit.
  """
  outputs: [TestActivity_OutputsTarget]

  """
  An entity’s parameter is being referenced by a ConstraintDefinition.
  """
  parameterUsedIn: [TestActivity_ParameterUsedInTarget]

  """
  Produces identifies resources generated by the processing unit. Resources are
  produced when the execution of the processing unit completes.
  """
  produces: [TestActivity_ProducesTarget]

  """
  Relates to is maintained automatically for the purpose of consistency.
  """
  relatesTo: [TestActivity_RelatesToTarget]

  """
  Specified by identifies constraint and/or performance requirements that this
  entity must satisfy.
  """
  specifiedBy: [TestActivity_SpecifiedByTarget]

  """
  Triggered by identifies the processing units that are enabled by this entity.  A
  processing unit begins execution when it has received control enablement, all of
  its triggers have arrived, and its necessary resources are available.
  """
  triggeredBy: [TestActivity_TriggeredByTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [TestActivity_UsesTarget]

}
# for mutations
input TestActivityREL_Input {
  accomplishes: [TestActivity_AccomplishesTarget_Input]
  basedOn: [TestActivity_BasedOnTarget_Input]
  captures: [TestActivity_CapturesTarget_Input]
  categorizedBy: [TestActivity_CategorizedByTarget_Input]
  constrainedBy: [TestActivity_ConstrainedByTarget_Input]
  consumes: [TestActivity_ConsumesTarget_Input]
  decomposedBy: [TestActivity_DecomposedByTarget_Input]
  decomposes: [TestActivity_DecomposesTarget_Input]
  documentedBy: [TestActivity_DocumentedByTarget_Input]
  elaborates: [TestActivity_ElaboratesTarget_Input]
  employs: [TestActivity_EmploysTarget_Input]
  establishedBy: [TestActivity_EstablishedByTarget_Input]
  exitsBy: [TestActivity_ExitsByTarget_Input]
  inputs: [TestActivity_InputsTarget_Input]
  outputs: [TestActivity_OutputsTarget_Input]
  parameterUsedIn: [TestActivity_ParameterUsedInTarget_Input]
  produces: [TestActivity_ProducesTarget_Input]
  relatesTo: [TestActivity_RelatesToTarget_Input]
  specifiedBy: [TestActivity_SpecifiedByTarget_Input]
  triggeredBy: [TestActivity_TriggeredByTarget_Input]
  uses: [TestActivity_UsesTarget_Input]
}
type TestActivity_AccomplishesTarget {
  verificationEventTarget: VerificationEventID
  """
  Behavior Type classifies the mapping of the ProgramElement to the
  ProgramActivity.
  """
  behaviorType: TestActivity_AccomplishesBehaviorType

}
enum TestActivity_AccomplishesBehaviorType {
  Atomic
  Integrated_Root
  Thread
}
type TestActivity_BasedOnTarget {
  requirementTarget: RequirementID
  verificationRequirementTarget: VerificationRequirementID
}
type TestActivity_CapturesTarget {
  resourceTarget: ResourceID
  """
  Acquire Available indicates whether or not the associated processing unit will
  acquire any available resources while waiting for the full amount required for
  execution.
  """
  acquireAvailable: Boolean

  """
  Amount indicates how much of the resource is captured by the processing unit
  """
  amount: String

}
type TestActivity_CategorizedByTarget {
  categoryTarget: CategoryID
}
type TestActivity_ConstrainedByTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings show how the parameter maps to the variable used.
  """
  mappings: [String]

}
type TestActivity_ConsumesTarget {
  resourceTarget: ResourceID
  """
  Amount indicates how much of the resource is consumed by the processing unit.
  """
  amount: String

  """
  Acquire Available indicates whether or not the associated processing unit will
  acquire any available resources while waiting for the full amount required for
  execution.
  """
  acquireAvailable: Boolean

}
type TestActivity_DecomposedByTarget {
  testActivityTarget: TestActivityID
}
type TestActivity_DecomposesTarget {
  testActivityTarget: TestActivityID
}
type TestActivity_DocumentedByTarget {
  documentTarget: DocumentID
}
type TestActivity_ElaboratesTarget {
  useCaseTarget: UseCaseID
  """
  Flow type indicates if this elaboration represents the primary flow or alternate
  flow.
  """
  flowType: TestActivity_ElaboratesFlowType

}
enum TestActivity_ElaboratesFlowType {
  Alternate
  Primary
}
type TestActivity_EmploysTarget {
  testConfigurationTarget: TestConfigurationID
}
type TestActivity_EstablishedByTarget {
  requirementTarget: RequirementID
}
type TestActivity_ExitsByTarget {
  exitTarget: ExitID
  """
  Selection Probability indicates the likelihood of exiting the processing unit
  via this exit. Note that the selection probability need not be normalized (i.e.,
  the sum of probabilities for all exits does not have to be 1.0). Normalization
  will occur automatically upon simulation.
  """
  selectionProbability: Float

  """
  Type characterizes the exit.
  """
  type: TestActivity_ExitsByType

}
enum TestActivity_ExitsByType {
  Normal
  Exception
  Timeout
}
type TestActivity_InputsTarget {
  testItemTarget: TestItemID
  """
  Queue Type specifies how the input entities should be ordered at the receiving
  unit.
  """
  queueType: TestActivity_InputsQueueType

}
enum TestActivity_InputsQueueType {
  FIFO
  LIFO
  Priority
  Reverse_Priority
}
type TestActivity_OutputsTarget {
  testItemTarget: TestItemID
}
type TestActivity_ParameterUsedInTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings identifies the parameters associated with the uses parameter from
  relationship. The mappings relationship attribute shows how the parameter maps
  to the variable used.
  """
  mappings: [String]

}
type TestActivity_ProducesTarget {
  resourceTarget: ResourceID
  """
  Amount indicates how much of the resource is produced by the processing unit.
  """
  amount: String

}
type TestActivity_RelatesToTarget {
  domainSetTarget: DomainSetID
}
type TestActivity_SpecifiedByTarget {
  verificationRequirementTarget: VerificationRequirementID
  """
  The Governs relationship attribute identifies the Parameter attribute that is
  associated in both the Requirement entity and Component entity joined by the
  specified by / specifies relationship.
  """
  governs: String

}
type TestActivity_TriggeredByTarget {
  testItemTarget: TestItemID
  """
  Queue Type specifies how the triggering entities should queue up at the
  receiving processing unit.
  """
  queueType: TestActivity_TriggeredByQueueType

}
enum TestActivity_TriggeredByQueueType {
  FIFO
  LIFO
  Priority
  Reverse_Priority
}
type TestActivity_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input TestActivity_AccomplishesTarget_Input {
  operation: MutationOperation!
  verificationEventTarget: VerificationEventID_Input
  behaviorType: TestActivity_AccomplishesBehaviorType
}
input TestActivity_BasedOnTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
  verificationRequirementTarget: VerificationRequirementID_Input
}
input TestActivity_CapturesTarget_Input {
  operation: MutationOperation!
  resourceTarget: ResourceID_Input
  acquireAvailable: Boolean
  amount: String
}
input TestActivity_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input TestActivity_ConstrainedByTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input TestActivity_ConsumesTarget_Input {
  operation: MutationOperation!
  resourceTarget: ResourceID_Input
  amount: String
  acquireAvailable: Boolean
}
input TestActivity_DecomposedByTarget_Input {
  operation: MutationOperation!
  testActivityTarget: TestActivityID_Input
}
input TestActivity_DecomposesTarget_Input {
  operation: MutationOperation!
  testActivityTarget: TestActivityID_Input
}
input TestActivity_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input TestActivity_ElaboratesTarget_Input {
  operation: MutationOperation!
  useCaseTarget: UseCaseID_Input
  flowType: TestActivity_ElaboratesFlowType
}
input TestActivity_EmploysTarget_Input {
  operation: MutationOperation!
  testConfigurationTarget: TestConfigurationID_Input
}
input TestActivity_EstablishedByTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
}
input TestActivity_ExitsByTarget_Input {
  operation: MutationOperation!
  exitTarget: ExitID_Input
  selectionProbability: Float
  type: TestActivity_ExitsByType
}
input TestActivity_InputsTarget_Input {
  operation: MutationOperation!
  testItemTarget: TestItemID_Input
  queueType: TestActivity_InputsQueueType
}
input TestActivity_OutputsTarget_Input {
  operation: MutationOperation!
  testItemTarget: TestItemID_Input
}
input TestActivity_ParameterUsedInTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input TestActivity_ProducesTarget_Input {
  operation: MutationOperation!
  resourceTarget: ResourceID_Input
  amount: String
}
input TestActivity_RelatesToTarget_Input {
  operation: MutationOperation!
  domainSetTarget: DomainSetID_Input
}
input TestActivity_SpecifiedByTarget_Input {
  operation: MutationOperation!
  verificationRequirementTarget: VerificationRequirementID_Input
  governs: String
}
input TestActivity_TriggeredByTarget_Input {
  operation: MutationOperation!
  testItemTarget: TestItemID_Input
  queueType: TestActivity_TriggeredByQueueType
}
input TestActivity_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# TestConfiguration definition
#########################################
type TestConfiguration {
  identity: TestConfigurationID!
  attributes: TestConfigurationATTR
  parameters: [Parameter]
  relations: TestConfigurationREL
}
# for mutations
input TestConfiguration_Input {
  operation: MutationOperation!
  identity: TestConfigurationID_Input!
  attributes: TestConfigurationATTR_Input
  parameters: [Parameter_Input]
  relations: TestConfigurationREL_Input
}
type TestConfigurationID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input TestConfigurationID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type TestConfigurationATTR {
  """
  Description is the written statement of this entity.
  """
  description: String

}
# for mutations
input TestConfigurationATTR_Input {
  description: String
}
type TestConfigurationREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [TestConfiguration_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [TestConfiguration_DocumentedByTarget]

  """
  Employed by identifies the test activities that use this entity.
  """
  employedBy: [TestConfiguration_EmployedByTarget]

  """
  Formed by identifies the system components, additional hardware and software,
  and facilities needed to conduct the associated verification events.
  """
  formedBy: [TestConfiguration_FormedByTarget]

  """
  Specified by identifies constraint and/or performance requirements that this
  entity must satisfy.
  """
  specifiedBy: [TestConfiguration_SpecifiedByTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [TestConfiguration_UsesTarget]

}
# for mutations
input TestConfigurationREL_Input {
  categorizedBy: [TestConfiguration_CategorizedByTarget_Input]
  documentedBy: [TestConfiguration_DocumentedByTarget_Input]
  employedBy: [TestConfiguration_EmployedByTarget_Input]
  formedBy: [TestConfiguration_FormedByTarget_Input]
  specifiedBy: [TestConfiguration_SpecifiedByTarget_Input]
  uses: [TestConfiguration_UsesTarget_Input]
}
type TestConfiguration_CategorizedByTarget {
  categoryTarget: CategoryID
}
type TestConfiguration_DocumentedByTarget {
  documentTarget: DocumentID
}
type TestConfiguration_EmployedByTarget {
  testActivityTarget: TestActivityID
}
type TestConfiguration_FormedByTarget {
  linkTarget: LinkID
  resilientModeTarget: ResilientModeID
  componentTarget: ComponentID
}
type TestConfiguration_SpecifiedByTarget {
  verificationRequirementTarget: VerificationRequirementID
  """
  The Governs relationship attribute identifies the Parameter attribute that is
  associated in both the Requirement entity and Component entity joined by the
  specified by / specifies relationship.
  """
  governs: String

}
type TestConfiguration_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input TestConfiguration_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input TestConfiguration_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input TestConfiguration_EmployedByTarget_Input {
  operation: MutationOperation!
  testActivityTarget: TestActivityID_Input
}
input TestConfiguration_FormedByTarget_Input {
  operation: MutationOperation!
  linkTarget: LinkID_Input
  resilientModeTarget: ResilientModeID_Input
  componentTarget: ComponentID_Input
}
input TestConfiguration_SpecifiedByTarget_Input {
  operation: MutationOperation!
  verificationRequirementTarget: VerificationRequirementID_Input
  governs: String
}
input TestConfiguration_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# TestItem definition
#########################################
type TestItem {
  identity: TestItemID!
  attributes: TestItemATTR
  parameters: [Parameter]
  relations: TestItemREL
}
# for mutations
input TestItem_Input {
  operation: MutationOperation!
  identity: TestItemID_Input!
  attributes: TestItemATTR_Input
  parameters: [Parameter_Input]
  relations: TestItemREL_Input
}
type TestItemID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input TestItemID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type TestItemATTR {
  """
  Size indicates the estimated size (in sizeUnits) of this entity.
  """
  size: String

  """
  Size Units indicates the measurement units associated with this entity.
  """
  sizeUnits: String

  """
  Priority is used to identify the order of processing of an entity. High priority
  entities (larger numbers) are processed before low priority entities (smaller
  numbers).
  """
  priority: String

  """
  Type is the physical type of this entity.
  """
  type: TestItemType

  """
  Title is the label to be used in formal documentation instead of the entity
  name.
  """
  title: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum TestItemType {
  nil
  Analog
  Digital
  Physical
  Mixed
}
# for mutations
input TestItemATTR_Input {
  size: String
  sizeUnits: String
  priority: String
  type: TestItemType
  title: String
  description: String
}
type TestItemREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [TestItem_CategorizedByTarget]

  """
  Mappings identifies the parameters associated with the constrained by
  relationship. The mappings relationship attribute shows how the parameter maps
  to the variable used.
  """
  constrainedBy: [TestItem_ConstrainedByTarget]

  """
  Decomposed by identifies the children of this entity.
  """
  decomposedBy: [TestItem_DecomposedByTarget]

  """
  Decomposes identifies the parent of this entity.
  """
  decomposes: [TestItem_DecomposesTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [TestItem_DocumentedByTarget]

  """
  Input to identifies the processing unit that transforms this entity.
  """
  inputTo: [TestItem_InputToTarget]

  """
  Output from identifies the processing unit that produces this entity.
  """
  outputFrom: [TestItem_OutputFromTarget]

  """
  An entity’s parameter is being referenced by a ConstraintDefinition.
  """
  parameterUsedIn: [TestItem_ParameterUsedInTarget]

  """
  Specified by identifies constraint and/or performance requirements that this
  entity must satisfy.
  """
  specifiedBy: [TestItem_SpecifiedByTarget]

  """
  Triggers identifies the information units that enable a processing unit to begin
  execution.  A processing unit begins execution when it has received control
  enablement, all of its triggers have arrived, and its necessary resources are
  available.
  """
  triggers: [TestItem_TriggersTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [TestItem_UsesTarget]

}
# for mutations
input TestItemREL_Input {
  categorizedBy: [TestItem_CategorizedByTarget_Input]
  constrainedBy: [TestItem_ConstrainedByTarget_Input]
  decomposedBy: [TestItem_DecomposedByTarget_Input]
  decomposes: [TestItem_DecomposesTarget_Input]
  documentedBy: [TestItem_DocumentedByTarget_Input]
  inputTo: [TestItem_InputToTarget_Input]
  outputFrom: [TestItem_OutputFromTarget_Input]
  parameterUsedIn: [TestItem_ParameterUsedInTarget_Input]
  specifiedBy: [TestItem_SpecifiedByTarget_Input]
  triggers: [TestItem_TriggersTarget_Input]
  uses: [TestItem_UsesTarget_Input]
}
type TestItem_CategorizedByTarget {
  categoryTarget: CategoryID
}
type TestItem_ConstrainedByTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings show how the parameter maps to the variable used.
  """
  mappings: [String]

}
type TestItem_DecomposedByTarget {
  testItemTarget: TestItemID
}
type TestItem_DecomposesTarget {
  testItemTarget: TestItemID
}
type TestItem_DocumentedByTarget {
  documentTarget: DocumentID
}
type TestItem_InputToTarget {
  testActivityTarget: TestActivityID
  """
  Queue Type specifies how the input entities should be ordered at the receiving
  unit.
  """
  queueType: TestItem_InputToQueueType

}
enum TestItem_InputToQueueType {
  FIFO
  LIFO
  Priority
  Reverse_Priority
}
type TestItem_OutputFromTarget {
  testActivityTarget: TestActivityID
}
type TestItem_ParameterUsedInTarget {
  constraintDefinitionTarget: ConstraintDefinitionID
  """
  Mappings identifies the parameters associated with the uses parameter from
  relationship. The mappings relationship attribute shows how the parameter maps
  to the variable used.
  """
  mappings: [String]

}
type TestItem_SpecifiedByTarget {
  verificationRequirementTarget: VerificationRequirementID
  """
  The Governs relationship attribute identifies the Parameter attribute that is
  associated in both the Requirement entity and Component entity joined by the
  specified by / specifies relationship.
  """
  governs: String

}
type TestItem_TriggersTarget {
  testActivityTarget: TestActivityID
  """
  Queue Type specifies how the triggering entities should queue up at the
  receiving processing unit.
  """
  queueType: TestItem_TriggersQueueType

}
enum TestItem_TriggersQueueType {
  FIFO
  LIFO
  Priority
  Reverse_Priority
}
type TestItem_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input TestItem_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input TestItem_ConstrainedByTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input TestItem_DecomposedByTarget_Input {
  operation: MutationOperation!
  testItemTarget: TestItemID_Input
}
input TestItem_DecomposesTarget_Input {
  operation: MutationOperation!
  testItemTarget: TestItemID_Input
}
input TestItem_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input TestItem_InputToTarget_Input {
  operation: MutationOperation!
  testActivityTarget: TestActivityID_Input
  queueType: TestItem_InputToQueueType
}
input TestItem_OutputFromTarget_Input {
  operation: MutationOperation!
  testActivityTarget: TestActivityID_Input
}
input TestItem_ParameterUsedInTarget_Input {
  operation: MutationOperation!
  constraintDefinitionTarget: ConstraintDefinitionID_Input
  mappings: [String]
}
input TestItem_SpecifiedByTarget_Input {
  operation: MutationOperation!
  verificationRequirementTarget: VerificationRequirementID_Input
  governs: String
}
input TestItem_TriggersTarget_Input {
  operation: MutationOperation!
  testActivityTarget: TestActivityID_Input
  queueType: TestItem_TriggersQueueType
}
input TestItem_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# Transition definition
#########################################
type Transition {
  identity: TransitionID!
  attributes: TransitionATTR
  parameters: [Parameter]
  relations: TransitionREL
}
# for mutations
input Transition_Input {
  operation: MutationOperation!
  identity: TransitionID_Input!
  attributes: TransitionATTR_Input
  parameters: [Parameter_Input]
  relations: TransitionREL_Input
}
type TransitionID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input TransitionID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type TransitionATTR {
  """
  Delay represents the period of time by which something is hindered in achieving
  its objective.
  """
  delay: String

  """
  Delay Units identifies the measurement basis for the delay attribute.
  """
  delayUnits: String

  """
  A rule that must be met to enable the occurrence of the transition.
  """
  guard: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
# for mutations
input TransitionATTR_Input {
  delay: String
  delayUnits: String
  guard: String
  description: String
}
type TransitionREL {
  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [Transition_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [Transition_DocumentedByTarget]

  """
  Enters represents the source of the enablement for another entity.
  """
  enters: [Transition_EntersTarget]

  """
  Exits represents the source for the departure of an entity.
  """
  exits: [Transition_ExitsTarget]

  """
  Serviced by identifies the processing unit that performs the interface function.
  """
  servicedBy: [Transition_ServicedByTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [Transition_UsesTarget]

}
# for mutations
input TransitionREL_Input {
  categorizedBy: [Transition_CategorizedByTarget_Input]
  documentedBy: [Transition_DocumentedByTarget_Input]
  enters: [Transition_EntersTarget_Input]
  exits: [Transition_ExitsTarget_Input]
  servicedBy: [Transition_ServicedByTarget_Input]
  uses: [Transition_UsesTarget_Input]
}
type Transition_CategorizedByTarget {
  categoryTarget: CategoryID
}
type Transition_DocumentedByTarget {
  documentTarget: DocumentID
}
type Transition_EntersTarget {
  stateTarget: StateID
}
type Transition_ExitsTarget {
  stateTarget: StateID
}
type Transition_ServicedByTarget {
  functionTarget: FunctionID
}
type Transition_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input Transition_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input Transition_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input Transition_EntersTarget_Input {
  operation: MutationOperation!
  stateTarget: StateID_Input
}
input Transition_ExitsTarget_Input {
  operation: MutationOperation!
  stateTarget: StateID_Input
}
input Transition_ServicedByTarget_Input {
  operation: MutationOperation!
  functionTarget: FunctionID_Input
}
input Transition_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# UseCase definition
#########################################
type UseCase {
  identity: UseCaseID!
  attributes: UseCaseATTR
  parameters: [Parameter]
  relations: UseCaseREL
}
# for mutations
input UseCase_Input {
  operation: MutationOperation!
  identity: UseCaseID_Input!
  attributes: UseCaseATTR_Input
  parameters: [Parameter_Input]
  relations: UseCaseREL_Input
}
type UseCaseID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input UseCaseID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type UseCaseATTR {
  """
  Doc. PUID is the project unique identifier that is often used in system
  development specifications and documents to identify the same entity in multiple
  documents. This is not to be confused with the database entity unique
  identifier.
  """
  puid: String

  """
  Preconditions are the conditions that must hold true for this use case to begin.
  """
  preconditions: String

  """
  Primary flow is a textual description of the most frequent scenario or scenarios
  for this use case. The primary flow serves as the foundation for the behavioral
  representation of the use case.
  """
  primaryFlow: String

  """
  Alternate flow is a textual description of the scenarios that are less frequent
  or exceptions. The alternate flow serves helps guide the development of the
  integrated logic.
  """
  alternateFlow: String

  """
  Postconditions are the conditions that must hold true once this case has
  completed.
  """
  postconditions: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
# for mutations
input UseCaseATTR_Input {
  puid: String
  preconditions: String
  primaryFlow: String
  alternateFlow: String
  postconditions: String
  description: String
}
type UseCaseREL {
  """
  Based on identifies the needs that this entity fulfills in whole or in part.
  """
  basedOn: [UseCase_BasedOnTarget]

  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [UseCase_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [UseCase_DocumentedByTarget]

  """
  A Use Case, Hazard, Unsafe Action enables the elicitation of requirements from
  stakeholders.
  """
  elicits: [UseCase_ElicitsTarget]

  """
  Extended by identifies the use cases which extend the entity by providing
  additional fragments of functionality not considered part of the normal base use
  case.
  """
  extendedBy: [UseCase_ExtendedByTarget]

  """
  Extends identifies the use case for which this entity provides an additional
  fragment of functionality not considered part of the normal base use case.
  """
  extends: [UseCase_ExtendsTarget]

  """
  Generalization of associates a specific object classification with a more
  general object classification. For example, "Vehicle" is a generalization of
  "Car," "Train," and "Plane."
  """
  generalizationOf: [UseCase_GeneralizationOfTarget]

  """
  Included in identifies the parent of this entity.
  """
  includedIn: [UseCase_IncludedInTarget]

  """
  Includes identifies the children of this entity.
  """
  includes: [UseCase_IncludesTarget]

  """
  Kind of indicates classification. This relationship is often referred to as the
  "is a" relationship (i.e., a car "is a" vehicle).
  """
  kindOf: [UseCase_KindOfTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [UseCase_UsesTarget]

}
# for mutations
input UseCaseREL_Input {
  basedOn: [UseCase_BasedOnTarget_Input]
  categorizedBy: [UseCase_CategorizedByTarget_Input]
  documentedBy: [UseCase_DocumentedByTarget_Input]
  elicits: [UseCase_ElicitsTarget_Input]
  extendedBy: [UseCase_ExtendedByTarget_Input]
  extends: [UseCase_ExtendsTarget_Input]
  generalizationOf: [UseCase_GeneralizationOfTarget_Input]
  includedIn: [UseCase_IncludedInTarget_Input]
  includes: [UseCase_IncludesTarget_Input]
  kindOf: [UseCase_KindOfTarget_Input]
  uses: [UseCase_UsesTarget_Input]
}
type UseCase_BasedOnTarget {
  requirementTarget: RequirementID
}
type UseCase_CategorizedByTarget {
  categoryTarget: CategoryID
}
type UseCase_DocumentedByTarget {
  documentTarget: DocumentID
}
type UseCase_ElicitsTarget {
  requirementTarget: RequirementID
}
type UseCase_ExtendedByTarget {
  useCaseTarget: UseCaseID
  """
  Extension point is the point at which the extending use case extends the base
  use case functionality.
  """
  extensionPoint: String

}
type UseCase_ExtendsTarget {
  useCaseTarget: UseCaseID
  """
  Extension point is the point at which the extending use case extends the base
  use case functionality.
  """
  extensionPoint: String

}
type UseCase_GeneralizationOfTarget {
  useCaseTarget: UseCaseID
  """
  Type classifies the nature of the generalization / specialization relationship.
  Inheritance indicates that the specialization shares the properties of the
  generalization. Instance indicates that the specialization also shares the
  relationships of the generalization.
  """
  type: UseCase_GeneralizationOfType

}
enum UseCase_GeneralizationOfType {
  Inheritance
  Instance
}
type UseCase_IncludedInTarget {
  useCaseTarget: UseCaseID
}
type UseCase_IncludesTarget {
  useCaseTarget: UseCaseID
}
type UseCase_KindOfTarget {
  useCaseTarget: UseCaseID
  """
  Type classifies the nature of the generalization / specialization relationship.
  Inheritance indicates that the specialization shares the properties of the
  generalization. Instance indicates that the specialization also shares the
  relationships of the generalization.
  """
  type: UseCase_KindOfType

}
enum UseCase_KindOfType {
  Inheritance
  Instance
}
type UseCase_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input UseCase_BasedOnTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
}
input UseCase_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input UseCase_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input UseCase_ElicitsTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
}
input UseCase_ExtendedByTarget_Input {
  operation: MutationOperation!
  useCaseTarget: UseCaseID_Input
  extensionPoint: String
}
input UseCase_ExtendsTarget_Input {
  operation: MutationOperation!
  useCaseTarget: UseCaseID_Input
  extensionPoint: String
}
input UseCase_GeneralizationOfTarget_Input {
  operation: MutationOperation!
  useCaseTarget: UseCaseID_Input
  type: UseCase_GeneralizationOfType
}
input UseCase_IncludedInTarget_Input {
  operation: MutationOperation!
  useCaseTarget: UseCaseID_Input
}
input UseCase_IncludesTarget_Input {
  operation: MutationOperation!
  useCaseTarget: UseCaseID_Input
}
input UseCase_KindOfTarget_Input {
  operation: MutationOperation!
  useCaseTarget: UseCaseID_Input
  type: UseCase_KindOfType
}
input UseCase_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# VerificationEvent definition
#########################################
type VerificationEvent {
  identity: VerificationEventID!
  attributes: VerificationEventATTR
  parameters: [Parameter]
  relations: VerificationEventREL
}
# for mutations
input VerificationEvent_Input {
  operation: MutationOperation!
  identity: VerificationEventID_Input!
  attributes: VerificationEventATTR_Input
  parameters: [Parameter_Input]
  relations: VerificationEventREL_Input
}
type VerificationEventID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input VerificationEventID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type VerificationEventATTR {
  """
  Labor Hours identifies hours planned or used for the accomplishment of a work
  entity.
  """
  laborHours: Float

  """
  Cost is the expense associated with an entity.
  """
  cost: Float

  """
  Duration is the estimated duration of the event.
  """
  duration: Float

  """
  Duration Units is the units in which the event duration is expressed.
  """
  durationUnits: String

  """
  Non-recurring Cost identifies other program costs.
  """
  nonRecurringCost: Float

  """
  Type characterizes the ProgramElement.
  """
  type: VerificationEventType

  """
  Contract Number identifies the specific contract, purchase order, or internal
  work order that the ProgramElement satisfies.
  """
  contractNumber: String

  """
  Start Date is the starting date for the verification event.
  """
  startDate: String

  """
  Title is the label to be used in formal documentation instead of the entity
  name.
  """
  title: String

  """
  End Date is the ending date for the verification event.
  """
  endDate: String

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum VerificationEventType {
  nil
  Program
  Project
  Work_Package
  Task
}
# for mutations
input VerificationEventATTR_Input {
  laborHours: Float
  cost: Float
  duration: Float
  durationUnits: String
  nonRecurringCost: Float
  type: VerificationEventType
  contractNumber: String
  startDate: String
  title: String
  endDate: String
  description: String
}
type VerificationEventREL {
  """
  Accomplished by identifies the ProgramElement for which the ProgramActivity is
  performed.
  """
  accomplishedBy: [VerificationEvent_AccomplishedByTarget]

  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [VerificationEvent_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [VerificationEvent_DocumentedByTarget]

  """
  Included in identifies the parent of this entity.
  """
  includedIn: [VerificationEvent_IncludedInTarget]

  """
  Includes identifies the children of this entity.
  """
  includes: [VerificationEvent_IncludesTarget]

  """
  Specified by identifies constraint and/or performance requirements that this
  entity must satisfy.
  """
  specifiedBy: [VerificationEvent_SpecifiedByTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [VerificationEvent_UsesTarget]

}
# for mutations
input VerificationEventREL_Input {
  accomplishedBy: [VerificationEvent_AccomplishedByTarget_Input]
  categorizedBy: [VerificationEvent_CategorizedByTarget_Input]
  documentedBy: [VerificationEvent_DocumentedByTarget_Input]
  includedIn: [VerificationEvent_IncludedInTarget_Input]
  includes: [VerificationEvent_IncludesTarget_Input]
  specifiedBy: [VerificationEvent_SpecifiedByTarget_Input]
  uses: [VerificationEvent_UsesTarget_Input]
}
type VerificationEvent_AccomplishedByTarget {
  testActivityTarget: TestActivityID
  """
  Behavior Type classifies the mapping of the ProgramElement to the
  ProgramActivity.
  """
  behaviorType: VerificationEvent_AccomplishedByBehaviorType

}
enum VerificationEvent_AccomplishedByBehaviorType {
  Atomic
  Integrated_Root
  Thread
}
type VerificationEvent_CategorizedByTarget {
  categoryTarget: CategoryID
}
type VerificationEvent_DocumentedByTarget {
  documentTarget: DocumentID
}
type VerificationEvent_IncludedInTarget {
  verificationEventTarget: VerificationEventID
}
type VerificationEvent_IncludesTarget {
  verificationEventTarget: VerificationEventID
}
type VerificationEvent_SpecifiedByTarget {
  requirementTarget: RequirementID
  """
  The Governs relationship attribute identifies the Parameter attribute that is
  associated in both the Requirement entity and Component entity joined by the
  specified by / specifies relationship.
  """
  governs: String

}
type VerificationEvent_UsesTarget {
  definedTermTarget: DefinedTermID
}
# for mutations
input VerificationEvent_AccomplishedByTarget_Input {
  operation: MutationOperation!
  testActivityTarget: TestActivityID_Input
  behaviorType: VerificationEvent_AccomplishedByBehaviorType
}
input VerificationEvent_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input VerificationEvent_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input VerificationEvent_IncludedInTarget_Input {
  operation: MutationOperation!
  verificationEventTarget: VerificationEventID_Input
}
input VerificationEvent_IncludesTarget_Input {
  operation: MutationOperation!
  verificationEventTarget: VerificationEventID_Input
}
input VerificationEvent_SpecifiedByTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
  governs: String
}
input VerificationEvent_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
#########################################
# VerificationRequirement definition
#########################################
type VerificationRequirement {
  identity: VerificationRequirementID!
  attributes: VerificationRequirementATTR
  parameters: [Parameter]
  relations: VerificationRequirementREL
}
# for mutations
input VerificationRequirement_Input {
  operation: MutationOperation!
  identity: VerificationRequirementID_Input!
  attributes: VerificationRequirementATTR_Input
  parameters: [Parameter_Input]
  relations: VerificationRequirementREL_Input
}
type VerificationRequirementID {
  id: ID!
  name: String!
  number: String!
}
# for mutations
input VerificationRequirementID_Input {
  id: ID # autogenerated on Create, required for Update / Delete
  name: String!
  number: String!
}
type VerificationRequirementATTR {
  """
  Type is the nature of the verification requirement, specifically whether it is a
  verification or validation requirement.
  """
  type: VerificationRequirementType

  """
  Title is the label to be used in formal documentation instead of the element
  name.
  """
  title: String

  """
  Doc. PUID is the project unique identifier that is often used in system
  development specifications and documents to identify the same entity in multiple
  documents. This is not to be confused with the database entity unique
  identifier.
  """
  puid: String

  """
  Status identifies the current status of the verification activity.
  """
  status: VerificationRequirementStatus

  """
  Level identifies the development level at which the related requirement
  statements are to be verified.
  """
  level: VerificationRequirementLevel

  """
  Method characterizes the qualification techniques to be used to ensure that the
  related requirement statements are satisfied.
  """
  method: VerificationRequirementMethod

  """
  Description is the written statement of this entity.
  """
  description: String

}
enum VerificationRequirementType {
  nil
  Validation
  Verification
}
enum VerificationRequirementStatus {
  nil
  Not_Yet_Planned
  Planned
  In_Progress
  Completed__Satisfactory
  Completed__Unsatisfactory
}
enum VerificationRequirementLevel {
  nil
  System
  Segment
  Subsystem
  HWCI
  HW_Element
  Part
  CSCI
  CSC
  CSU
  Facility
  Task
}
enum VerificationRequirementMethod {
  nil
  Analysis
  Demonstration
  Inspection
  Test
}
# for mutations
input VerificationRequirementATTR_Input {
  type: VerificationRequirementType
  title: String
  puid: String
  status: VerificationRequirementStatus
  level: VerificationRequirementLevel
  method: VerificationRequirementMethod
  description: String
}
type VerificationRequirementREL {
  """
  Based on identifies the needs that this entity fulfills in whole or in part.
  """
  basedOn: [VerificationRequirement_BasedOnTarget]

  """
  Basis of identifies the entities that fulfill one or more needs.
  """
  basisOf: [VerificationRequirement_BasisOfTarget]

  """
  Categorized by identifies a grouping that includes this entity.
  """
  categorizedBy: [VerificationRequirement_CategorizedByTarget]

  """
  Documented by identifies the source document which specifies and/or enhances the
  definition of this entity.
  """
  documentedBy: [VerificationRequirement_DocumentedByTarget]

  """
  Reported by identifies the documentation entity of which the entity is the
  primary subject.
  """
  reportedBy: [VerificationRequirement_ReportedByTarget]

  """
  Specifies identifies those entities whose performance or whose characteristics
  are bounded by the requirement.
  """
  specifies: [VerificationRequirement_SpecifiesTarget]

  """
  Uses identifies a term or acronym employed in the generated document.
  """
  uses: [VerificationRequirement_UsesTarget]

  """
  Verifies identifies the entities to be validated.
  """
  verifies: [VerificationRequirement_VerifiesTarget]

}
# for mutations
input VerificationRequirementREL_Input {
  basedOn: [VerificationRequirement_BasedOnTarget_Input]
  basisOf: [VerificationRequirement_BasisOfTarget_Input]
  categorizedBy: [VerificationRequirement_CategorizedByTarget_Input]
  documentedBy: [VerificationRequirement_DocumentedByTarget_Input]
  reportedBy: [VerificationRequirement_ReportedByTarget_Input]
  specifies: [VerificationRequirement_SpecifiesTarget_Input]
  uses: [VerificationRequirement_UsesTarget_Input]
  verifies: [VerificationRequirement_VerifiesTarget_Input]
}
type VerificationRequirement_BasedOnTarget {
  requirementTarget: RequirementID
}
type VerificationRequirement_BasisOfTarget {
  testActivityTarget: TestActivityID
}
type VerificationRequirement_CategorizedByTarget {
  categoryTarget: CategoryID
}
type VerificationRequirement_DocumentedByTarget {
  documentTarget: DocumentID
}
type VerificationRequirement_ReportedByTarget {
  documentTarget: DocumentID
}
type VerificationRequirement_SpecifiesTarget {
  testActivityTarget: TestActivityID
  testConfigurationTarget: TestConfigurationID
  testItemTarget: TestItemID
  """
  The Governs relationship attribute identifies the Parameter attribute that is
  associated in both the Requirement entity and Component entity joined by the
  specified by / specifies relationship.
  """
  governs: String

}
type VerificationRequirement_UsesTarget {
  definedTermTarget: DefinedTermID
}
type VerificationRequirement_VerifiesTarget {
  linkTarget: LinkID
  componentTarget: ComponentID
  itemTarget: ItemID
  lossScenarioTarget: LossScenarioID
  requirementTarget: RequirementID
  functionTarget: FunctionID
}
# for mutations
input VerificationRequirement_BasedOnTarget_Input {
  operation: MutationOperation!
  requirementTarget: RequirementID_Input
}
input VerificationRequirement_BasisOfTarget_Input {
  operation: MutationOperation!
  testActivityTarget: TestActivityID_Input
}
input VerificationRequirement_CategorizedByTarget_Input {
  operation: MutationOperation!
  categoryTarget: CategoryID_Input
}
input VerificationRequirement_DocumentedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input VerificationRequirement_ReportedByTarget_Input {
  operation: MutationOperation!
  documentTarget: DocumentID_Input
}
input VerificationRequirement_SpecifiesTarget_Input {
  operation: MutationOperation!
  testActivityTarget: TestActivityID_Input
  testConfigurationTarget: TestConfigurationID_Input
  testItemTarget: TestItemID_Input
  governs: String
}
input VerificationRequirement_UsesTarget_Input {
  operation: MutationOperation!
  definedTermTarget: DefinedTermID_Input
}
input VerificationRequirement_VerifiesTarget_Input {
  operation: MutationOperation!
  linkTarget: LinkID_Input
  componentTarget: ComponentID_Input
  itemTarget: ItemID_Input
  lossScenarioTarget: LossScenarioID_Input
  requirementTarget: RequirementID_Input
  functionTarget: FunctionID_Input
}
type CallStructure {
  function: FunctionID
  structure: StructureItem
}
type StructureItem {
  id: ID!
  type: StructureType
  # optional annotation for a Branch
  annotation: String
  # reference UUID / Name / Num for: Function, Exit / ExitCondition (Exit), Replicate (DomainSet) types
  referenceID: String
  referenceName: String
  referenceNum: String
  structure: [StructureItem]
}
enum StructureType
{
  Branch
  Function
  Exit
  ExitCondition
  Loop
  LoopExit
  Parallel
  Replicate
  Select
}
